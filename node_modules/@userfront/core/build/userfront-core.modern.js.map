{"version":3,"file":"userfront-core.modern.js","sources":["../src/index.js","../src/constants.js"],"sourcesContent":["import axios from \"axios\";\nimport Cookies from \"js-cookie\";\n// import jwt from \"jsonwebtoken\";\n\nimport constants from \"./constants\";\nconst { apiUrl, privateIPRegex } = constants;\n\nlet initCallbacks = [];\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nconst isTestHostname = (hn) => {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n};\n\nconst store = {\n  mode: isTestHostname() ? \"test\" : \"live\",\n};\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenant ID\");\n  store.tenantId = tenantId;\n  store.accessTokenName = `access.${tenantId}`;\n  store.idTokenName = `id.${tenantId}`;\n  store.refreshTokenName = `refresh.${tenantId}`;\n  setTokensFromCookies();\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n * Set and then return the access token\n */\nfunction accessToken() {\n  store.accessToken = Cookies.get(store.accessTokenName);\n  return store.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nfunction idToken() {\n  store.idToken = Cookies.get(store.idTokenName);\n  return store.idToken;\n}\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nfunction getQueryAttr(attrName) {\n  if (\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\nfunction getProviderLink(provider) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenant ID\");\n\n  let url = `https://api.userfront.com/v0/auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  const redirect = getQueryAttr(\"redirect\");\n  if (redirect) {\n    url += `&redirect=${encodeURIComponent(redirect)}`;\n  }\n\n  return url;\n}\n\n/**\n * Define the mode of operation (live or test)\n */\nasync function setMode() {\n  try {\n    const { data } = await axios.get(`${apiUrl}tenants/${store.tenantId}/mode`);\n    store.mode = data.mode || \"test\";\n  } catch (err) {\n    store.mode = \"test\";\n  }\n}\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {Object} options\n */\nasync function signup({ method, username, name, email, password }) {\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property');\n  }\n  switch (method) {\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signupWithSSO(method);\n    case \"password\":\n      return signupWithPassword({ username, name, email, password });\n    default:\n      throw new Error('Userfront.signup called with invalid \"method\" property');\n  }\n}\n\n/**\n * Register a new user in via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n */\nfunction signupWithSSO(provider) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink(provider);\n  window.location.assign(url);\n}\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {Object} options\n */\nasync function signupWithPassword({ username, name, email, password }) {\n  const { data } = await axios.post(`${apiUrl}auth/create`, {\n    tenantId: store.tenantId,\n    username,\n    name,\n    email,\n    password,\n  });\n\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Please try again.\");\n  }\n}\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {Object} options\n */\nasync function login({\n  method,\n  email,\n  username,\n  emailOrUsername,\n  password,\n  token,\n  uuid,\n}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property');\n  }\n  switch (method) {\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return loginWithSSO(method);\n    case \"password\":\n      return loginWithPassword({ email, username, emailOrUsername, password });\n    case \"link\":\n      return loginWithLink(token, uuid);\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property');\n  }\n}\n\n/**\n * Log a user in via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n */\nfunction loginWithSSO(provider) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink(provider);\n  window.location.assign(url);\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {Object} options\n */\nasync function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n}) {\n  const { data } = await axios.post(`${apiUrl}auth/basic`, {\n    tenantId: store.tenantId,\n    emailOrUsername: email || username || emailOrUsername,\n    password,\n  });\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Please try again.\");\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n */\nasync function loginWithLink(token, uuid) {\n  if (!token) token = getQueryAttr(\"token\");\n  if (!uuid) uuid = getQueryAttr(\"uuid\");\n  if (!token || !uuid) return;\n\n  const { data } = await axios.put(`${apiUrl}auth/link`, {\n    token,\n    uuid,\n    tenantId: store.tenantId,\n  });\n\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\"Problem logging in.\");\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nasync function sendLoginLink(email) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (err) {\n    throw new Error(\"Problem sending link\");\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nasync function sendResetLink(email) {\n  try {\n    const { data } = await axios.post(`${apiUrl}auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (err) {\n    throw new Error(\"Problem sending link\");\n  }\n}\n\nasync function resetPassword({ uuid, token, password }) {\n  if (!token) token = getQueryAttr(\"token\");\n  if (!uuid) uuid = getQueryAttr(\"uuid\");\n  if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n  const { data } = await axios.put(`${apiUrl}auth/reset`, {\n    tenantId: store.tenantId,\n    uuid,\n    token,\n    password,\n  });\n  if (data.tokens) {\n    setCookiesAndTokens(data.tokens);\n    redirectToPath(getQueryAttr(\"redirect\") || data.redirectTo || \"/\");\n  } else {\n    throw new Error(\n      \"There was a problem resetting your password. Please try again.\"\n    );\n  }\n}\n\n// TODO replace with direct check of the access token.\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's login redirection path (path after login).\n */\nasync function redirectIfLoggedIn() {\n  if (!store.accessToken) return removeAllCookies();\n  try {\n    const { data } = await axios.get(`${apiUrl}self`, {\n      headers: {\n        authorization: `Bearer ${store.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nfunction redirectToPath(pathOrUrl) {\n  try {\n    document;\n  } catch (error) {\n    return;\n  }\n  if (!pathOrUrl) return;\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.href = path;\n  }\n}\n\n/**\n * Log a user out and redirect to the logout path.\n */\nasync function logout() {\n  if (!store.accessToken) return removeAllCookies();\n  try {\n    const { data } = await axios.get(`${apiUrl}auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    redirectToPath(data.redirectTo);\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nfunction setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  Cookies.remove(name);\n  Cookies.remove(name, { secure: true, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: true, sameSite: \"None\" });\n  Cookies.remove(name, { secure: false, sameSite: \"Lax\" });\n  Cookies.remove(name, { secure: false, sameSite: \"None\" });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nfunction removeAllCookies() {\n  removeCookie(store.accessTokenName);\n  removeCookie(store.idTokenName);\n  removeCookie(store.refreshTokenName);\n  store.accessToken = undefined;\n  store.idToken = undefined;\n  store.refreshToken = undefined;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nfunction setTokensFromCookies() {\n  store.accessToken = Cookies.get(store.accessTokenName);\n  store.idToken = Cookies.get(store.idTokenName);\n  store.refreshToken = Cookies.get(store.refreshTokenName);\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nfunction setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  setTokensFromCookies();\n}\n\n/**\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\nexport default {\n  addInitCallback,\n  accessToken,\n  getQueryAttr,\n  idToken,\n  init,\n  isTestHostname,\n  login,\n  logout,\n  redirectIfLoggedIn,\n  registerUrlChangedEventListener,\n  resetPassword,\n  sendLoginLink,\n  sendResetLink,\n  setMode,\n  setCookie,\n  signup,\n  store,\n};\n","export default {\n  apiUrl: `https://api.userfront.com/v0/`,\n  privateIPRegex: /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g,\n};\n"],"names":["apiUrl","privateIPRegex","initCallbacks","isTestHostname","hn","hostname","window","location","match","err","store","mode","getQueryAttr","attrName","href","indexOf","decodeURIComponent","split","getProviderLink","provider","Error","tenantId","url","origin","redirect","encodeURIComponent","redirectToPath","pathOrUrl","document","error","el","createElement","pathname","hash","search","setCookie","value","options","type","cookieName","secure","sameSite","Cookies","set","removeCookie","name","remove","removeAllCookies","accessTokenName","idTokenName","refreshTokenName","accessToken","undefined","idToken","refreshToken","setTokensFromCookies","get","setCookiesAndTokens","tokens","access","cookieOptions","id","refresh","isRegistered","addInitCallback","cb","push","init","console","warn","length","forEach","login","async","method","email","username","emailOrUsername","password","token","uuid","assign","loginWithSSO","data","axios","post","redirectTo","loginWithPassword","put","loginWithLink","logout","headers","authorization","redirectIfLoggedIn","tenant","loginRedirectPath","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","resetPassword","sendLoginLink","sendResetLink","setMode","signup","signupWithSSO","signupWithPassword"],"mappings":"8CAKA,MAAMA,OAAEA,EAAFC,eAAUA,GCLD,CACbD,OAAS,gCACTC,eAAgB,wGDKlB,IAAIC,EAAgB,GAMpB,MAAMC,EAAkBC,IACtB,IACE,MAAMC,EAAWD,GAAME,OAAOC,SAASF,SACvC,SAAUA,EAASG,MAAM,gBAAiBH,EAASG,MAAMP,IACzD,MAAOQ,GACP,WAIEC,EAAQ,CACZC,KAAMR,IAAmB,OAAS,QAsDpC,SAASS,EAAaC,GACpB,GACGP,OAAOC,SAASO,QACjBR,OAAOC,SAASO,KAAKC,QAAWF,EAAF,KAAiB,GAIjD,OAAOG,mBACLV,OAAOC,SAASO,KAAKG,MAASJ,EAAF,KAAe,GAAGI,MAAM,KAAK,IAI7D,SAASC,EAAgBC,GACvB,IAAKA,EAAU,UAAUC,MAAM,oBAC/B,IAAKV,EAAMW,SAAU,UAAUD,MAAM,qBAErC,IAAIE,EAAO,qCAAoCH,qBAA4BT,EAAMW,mBAAmBf,OAAOC,SAASgB,SAEpH,MAAMC,EAAWZ,EAAa,YAK9B,OAJIY,IACFF,GAAQ,aAAYG,mBAAmBD,IAGlCF,EAgPT,SAASI,EAAeC,GACtB,IACEC,SACA,MAAOC,GACP,OAEF,IAAKF,EAAW,OAChB,MAAMG,EAAKF,SAASG,cAAc,KAClCD,EAAGhB,KAAOa,EAENG,EAAGE,WAAa1B,OAAOC,SAASyB,WAClC1B,OAAOC,SAASO,KAFN,GAAEgB,EAAGE,WAAWF,EAAGG,OAAOH,EAAGI,UA8B3C,SAASC,EAAUC,EAAOC,EAASC,GACjC,MAAMC,EAAc,GAAED,KAAQ5B,EAAMW,WACpCgB,EAAUA,GAAW,CACnBG,OAAuB,SAAf9B,EAAMC,KACd8B,SAAU,OAEC,YAATH,IACFD,EAAQI,SAAW,UAErBC,EAAQC,IAAIJ,EAAYH,EAAOC,GAOjC,SAASO,EAAaC,GACpBH,EAAQI,OAAOD,GACfH,EAAQI,OAAOD,EAAM,CAAEL,QAAQ,EAAMC,SAAU,QAC/CC,EAAQI,OAAOD,EAAM,CAAEL,QAAQ,EAAMC,SAAU,SAC/CC,EAAQI,OAAOD,EAAM,CAAEL,QAAQ,EAAOC,SAAU,QAChDC,EAAQI,OAAOD,EAAM,CAAEL,QAAQ,EAAOC,SAAU,SAMlD,SAASM,IACPH,EAAalC,EAAMsC,iBACnBJ,EAAalC,EAAMuC,aACnBL,EAAalC,EAAMwC,kBACnBxC,EAAMyC,iBAAcC,EACpB1C,EAAM2C,aAAUD,EAChB1C,EAAM4C,kBAAeF,EAMvB,SAASG,IACP7C,EAAMyC,YAAcT,EAAQc,IAAI9C,EAAMsC,iBACtCtC,EAAM2C,QAAUX,EAAQc,IAAI9C,EAAMuC,aAClCvC,EAAM4C,aAAeZ,EAAQc,IAAI9C,EAAMwC,kBAOzC,SAASO,EAAoBC,GAC3BvB,EAAUuB,EAAOC,OAAOvB,MAAOsB,EAAOC,OAAOC,cAAe,UAC5DzB,EAAUuB,EAAOG,GAAGzB,MAAOsB,EAAOG,GAAGD,cAAe,MACpDzB,EAAUuB,EAAOI,QAAQ1B,MAAOsB,EAAOI,QAAQF,cAAe,WAC9DL,IAOF,IAAIQ,GAAe,EA2BnB,MAAe,CACbC,gBA/ZF,SAAyBC,GAClBA,GAAoB,mBAAPA,GAClB/D,EAAcgE,KAAKD,IA8ZnBd,YAxZF,WAEE,OADAzC,EAAMyC,YAAcT,EAAQc,IAAI9C,EAAMsC,iBAC/BtC,EAAMyC,aAuZbvC,aAAAA,EACAyC,QAlZF,WAEE,OADA3C,EAAM2C,QAAUX,EAAQc,IAAI9C,EAAMuC,aAC3BvC,EAAM2C,SAiZbc,KAzbF,SAAc9C,GACZ,IAAKA,EAAU,OAAO+C,QAAQC,KAAK,2CACnC3D,EAAMW,SAAWA,EACjBX,EAAMsC,gBAAmB,UAAS3B,EAClCX,EAAMuC,YAAe,MAAK5B,EAC1BX,EAAMwC,iBAAoB,WAAU7B,EACpCkC,IACA,IACMrD,EAAcoE,OAAS,GACzBpE,EAAcqE,QAASN,IAChBA,GAAoB,mBAAPA,GAClBA,EAAG,CAAE5C,SAAAA,MAGTnB,EAAgB,GAChB,MAAO2B,MA2aT1B,eAAAA,EACAqE,MAzSFC,gBAAqBC,OACnBA,EADmBC,MAEnBA,EAFmBC,SAGnBA,EAHmBC,gBAInBA,EAJmBC,SAKnBA,EALmBC,MAMnBA,EANmBC,KAOnBA,IAEA,IAAKN,EACH,UAAUtD,MAAM,oDAElB,OAAQsD,GACN,IAAK,QACL,IAAK,WACL,IAAK,SACL,IAAK,SACL,IAAK,WACH,OAeN,SAAsBvD,GACpB,IAAKA,EAAU,UAAUC,MAAM,oBAC/B,MAAME,EAAMJ,EAAgBC,GAC5Bb,OAAOC,SAAS0E,OAAO3D,GAlBZ4D,CAAaR,GACtB,IAAK,WACH,OAwBND,gBAAiCE,MAC/BA,EAD+BC,SAE/BA,EAF+BC,gBAG/BA,EAH+BC,SAI/BA,IAEA,MAAMK,KAAEA,SAAeC,EAAMC,KAAQrF,EAAF,aAAsB,CACvDqB,SAAUX,EAAMW,SAChBwD,gBAAiBF,GAASC,GAAYC,EACtCC,SAAAA,IAEF,IAAIK,EAAKzB,OAIP,UAAUtC,MAAM,qBAHhBqC,EAAoB0B,EAAKzB,QACzBhC,EAAed,EAAa,aAAeuE,EAAKG,YAAc,KArCrDC,CAAkB,CAAEZ,MAAAA,EAAOC,SAAAA,EAAUC,gBAAAA,EAAiBC,SAAAA,IAC/D,IAAK,OACH,OA+CNL,eAA6BM,EAAOC,GAGlC,GAFKD,IAAOA,EAAQnE,EAAa,UAC5BoE,IAAMA,EAAOpE,EAAa,UAC1BmE,IAAUC,EAAM,OAErB,MAAMG,KAAEA,SAAeC,EAAMI,IAAOxF,EAAF,YAAqB,CACrD+E,MAAAA,EACAC,KAAAA,EACA3D,SAAUX,EAAMW,WAGlB,IAAI8D,EAAKzB,OAIP,UAAUtC,MAAM,uBAHhBqC,EAAoB0B,EAAKzB,QACzBhC,EAAed,EAAa,aAAeuE,EAAKG,YAAc,KA5DrDG,CAAcV,EAAOC,GAC9B,QACE,UAAU5D,MAAM,2DAkRpBsE,OApHFjB,iBACE,IAAK/D,EAAMyC,YAAa,OAAOJ,IAC/B,IACE,MAAMoC,KAAEA,SAAeC,EAAM5B,IAAOxD,EAAF,cAAuB,CACvD2F,QAAS,CACPC,cAAgB,UAASlF,EAAMyC,eAGnCJ,IACArB,EAAeyD,EAAKG,YACpB,MAAO7E,GACPsC,MA0GF8C,mBA1JFpB,iBACE,IAAK/D,EAAMyC,YAAa,OAAOJ,IAC/B,IACE,MAAMoC,KAAEA,SAAeC,EAAM5B,IAAOxD,EAAF,OAAgB,CAChD2F,QAAS,CACPC,cAAgB,UAASlF,EAAMyC,eAG/BgC,EAAKW,QAAUX,EAAKW,OAAOC,mBAC7BrE,EAAeyD,EAAKW,OAAOC,mBAE7B,MAAOtF,GACPsC,MA+IFiD,gCApCF,WACE,IAAIjC,EAAJ,CACAA,GAAe,EACf,IACEkC,QAAQC,WAAcC,EAMjBF,QAAQC,UALX,WACE,IAAIE,EAAMD,EAAEE,MAAMC,KAAMC,WAGxB,OAFAjG,OAAOkG,cAAc,IAAIC,MAAM,cAC/BnG,OAAOkG,cAAc,IAAIC,MAAM,eACxBL,IAGXH,QAAQS,aAAe,CAAEP,GACvB,WACE,IAAIC,EAAMD,EAAEE,MAAMC,KAAMC,WAGxB,OAFAjG,OAAOkG,cAAc,IAAIC,MAAM,iBAC/BnG,OAAOkG,cAAc,IAAIC,MAAM,eACxBL,GALY,CAMlBH,QAAQS,cAEbpG,OAAOqG,iBAAiB,WAAY,KAClCrG,OAAOkG,cAAc,IAAIC,MAAM,iBAEjC,MAAO5E,IAnBa,IAAEsE,IAiCxBS,cArLFnC,gBAA6BO,KAAEA,EAAFD,MAAQA,EAARD,SAAeA,IAG1C,GAFKC,IAAOA,EAAQnE,EAAa,UAC5BoE,IAAMA,EAAOpE,EAAa,UAC1BmE,IAAUC,EAAM,UAAU5D,MAAM,yBACrC,MAAM+D,KAAEA,SAAeC,EAAMI,IAAOxF,EAAF,aAAsB,CACtDqB,SAAUX,EAAMW,SAChB2D,KAAAA,EACAD,MAAAA,EACAD,SAAAA,IAEF,IAAIK,EAAKzB,OAIP,UAAUtC,MACR,kEAJFqC,EAAoB0B,EAAKzB,QACzBhC,EAAed,EAAa,aAAeuE,EAAKG,YAAc,MA0KhEuB,cAlNFpC,eAA6BE,GAC3B,IACE,MAAMQ,KAAEA,SAAeC,EAAMC,KAAQrF,EAAF,YAAqB,CACtD2E,MAAAA,EACAtD,SAAUX,EAAMW,WAElB,OAAO8D,EACP,MAAO1E,GACP,UAAUW,MAAM,0BA2MlB0F,cAnMFrC,eAA6BE,GAC3B,IACE,MAAMQ,KAAEA,SAAeC,EAAMC,KAAQrF,EAAF,kBAA2B,CAC5D2E,MAAAA,EACAtD,SAAUX,EAAMW,WAElB,OAAO8D,EACP,MAAO1E,GACP,UAAUW,MAAM,0BA4LlB2F,QAtXFtC,iBACE,IACE,MAAMU,KAAEA,SAAeC,EAAM5B,IAAK,GAAExD,YAAiBU,EAAMW,iBAC3DX,EAAMC,KAAOwE,EAAKxE,MAAQ,OAC1B,MAAOF,GACPC,EAAMC,KAAO,SAkXfwB,UAAAA,EACA6E,OA1WFvC,gBAAsBC,OAAEA,EAAFE,SAAUA,EAAV/B,KAAoBA,EAApB8B,MAA0BA,EAA1BG,SAAiCA,IACrD,IAAKJ,EACH,UAAUtD,MAAM,qDAElB,OAAQsD,GACN,IAAK,QACL,IAAK,WACL,IAAK,SACL,IAAK,SACL,IAAK,WACH,OAaN,SAAuBvD,GACrB,IAAKA,EAAU,UAAUC,MAAM,oBAC/B,MAAME,EAAMJ,EAAgBC,GAC5Bb,OAAOC,SAAS0E,OAAO3D,GAhBZ2F,CAAcvC,GACvB,IAAK,WACH,OAsBND,gBAAkCG,SAAEA,EAAF/B,KAAYA,EAAZ8B,MAAkBA,EAAlBG,SAAyBA,IACzD,MAAMK,KAAEA,SAAeC,EAAMC,KAAQrF,EAAF,cAAuB,CACxDqB,SAAUX,EAAMW,SAChBuD,SAAAA,EACA/B,KAAAA,EACA8B,MAAAA,EACAG,SAAAA,IAGF,IAAIK,EAAKzB,OAIP,UAAUtC,MAAM,qBAHhBqC,EAAoB0B,EAAKzB,QACzBhC,EAAed,EAAa,aAAeuE,EAAKG,YAAc,KAjCrD4B,CAAmB,CAAEtC,SAAAA,EAAU/B,KAAAA,EAAM8B,MAAAA,EAAOG,SAAAA,IACrD,QACE,UAAU1D,MAAM,4DA6VpBV,MAAAA"}