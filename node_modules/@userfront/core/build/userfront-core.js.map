{"version":3,"file":"userfront-core.js","sources":["../src/store.js","../src/utils.js","../src/user.js","../src/api.js","../src/cookies.js","../src/tokens.js","../src/mfa.js","../src/session.js","../src/pkce.js","../src/url.js","../src/authentication.js","../src/refresh.js","../src/password.js","../src/sso.js","../src/link.js","../src/verificationCode.js","../src/totp.js","../src/logout.js","../src/constants.js","../src/mode.js","../src/user.methods.js","../src/index.js","../src/login.js","../src/password.migrate.js","../src/saml.js","../src/signup.js"],"sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJwtPayload(token) {\n  try {\n    // Split token into constituent parts\n    const base64Url = token.split('.')[1];\n    // Convert from base64url to base64 encoding\n    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    \n    // To correctly decode a UTF-8 string without misinterpreting non-ASCII characters:\n    // 1. Decode the base64 to a UTF-16 string that may contain misinterpreted chars (window.atob)\n    //    -> DOMStrings are natively UTF-16LE, while JWTs are UTF-8\n    // 2. Convert the string to percent encoding (map each char to %HH where HH = hex value of byte)\n    //    (the '00' + ... + .slice(-2) bit ensures a single char is encoded correctly,\n    //     not strictly necessary here but included for correctness)\n    // 3. Interpret the percent-encoded string as a URI component, which is UTF-8 by definition (decodeURIComponent)\n    //    -> now non-ASCII characters \n    //  \n    const jsonPayload = decodeURIComponent(window.atob(base64).split('').map(c => \n      '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\n    ).join(''));\n\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\n/*\n  Worked example of decoding above:\n  A JWT payload {\"foo\":\"bår\"} is base64url encoded as eyJmb28iOiJiw6VyIn0\n  1. base64url to base64: eyJmb28iOiJiw6VyIn0\n    = eyJmb28iOiJiw6VyIn0\n    (no change in this case)\n  2. base64 to DOMString: atob(eyJmb28iOiJiw6VyIn0)\n    = {\"foo\":\"bÃ¥r\"}\n    ->  \"å\" in UTF-8 encoding = 0xC3 0xA5\n        0xC3 0xA5 as UTF-16LE = Ã¥\n  3. DOMString to percent-encoding\n    = %7b%22%66%6f%6f%22%3a%22%62 %c3%a5 %72%22%7d\n    -> Ã¥ was encoded as %c3%a5 \n  4. Percent-encoded UTF-8 to DOMString\n    = {\"foo\":\"bår\"}\n    ->  URIs are always UTF-8, so decodeURIComponent knows to interpret the percent-encoded\n        string as UTF-8.\n        (As before, DOMStrings are UTF-16LE, so internally \"å\" is encoded as 0xE5 per UTF-16.)\n  Note: UTF-8 and UTF-16 are equivalent in the ASCII range 0x00 - 0x7f, so atob(base64) is OK\n  if it's known that the string uses only those characters.\n*/\n\n/**\n * Client-side check:\n * Determine whether the given JWT is present and unexpired\n *\n * @param {String} token JSON Web Token\n * @returns {Boolean}\n */\nexport function isJwtLocallyValid(token) {\n  try {\n    // Must be present\n    if (!token) {\n      return false;\n    }\n\n    // Must not be expired\n    const payload = getJwtPayload(token);\n    return new Date(payload.exp * 1000) > new Date();\n  } catch (error) {\n    return false;\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n\nexport function isBrowser() {\n  return typeof window !== \"undefined\";\n}","import { store } from \"./store.js\";\nimport { getJwtPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJwtPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"phoneNumber\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isEmailConfirmed\",\n    \"isPhoneNumberConfirmed\",\n    \"confirmedEmailAt\",\n    \"confirmedPhoneNumberAt\",\n    \"isMfaRequired\",\n    \"isConfirmed\", // Deprecated\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\n\n// Replace multiple slashes // with single slash / (except in the protocol)\nfunction reduceSlashes(str) {\n  return str.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\n/**\n * Perform a GET request\n * @param {String} path\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function get(path, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.get(url, options);\n}\n\n/**\n * Perform a POST request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function post(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.post(url, payload, options);\n}\n\n/**\n * Perform a PUT request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function put(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.put(url, payload, options);\n}\n\nexport default {\n  get,\n  post,\n  put,\n};\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  // Define all possible path and domain combinations\n  let paths, domains;\n  try {\n    const path = window.location.pathname;\n    const hostname = window.location.hostname;\n    const hostnameParts = hostname.split(\".\");\n    const primaryDomain = hostnameParts.slice(-2).join(\".\");\n    paths = [undefined, path, \"/\"];\n    domains = [\n      undefined,\n      hostname,\n      `.${hostname}`,\n      primaryDomain,\n      `.${primaryDomain}`,\n    ];\n  } catch (err) {\n    paths = [undefined, \"/\"];\n    domains = [undefined];\n  }\n\n  // Iterate over paths and domains, and remove cookies if present\n  paths.map((path) => {\n    domains.map((domain) => {\n      const options = {};\n      if (domain) options.domain = domain;\n      if (path) options.path = path;\n      Cookies.remove(name, options);\n    });\n  });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\nimport { refresh } from \"./refresh.js\";\nimport { isJwtLocallyValid } from \"./utils.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { exchange } from \"./refresh.js\";\n\nstore.tokens = store.tokens || {};\nstore.tokens.refresh = refresh;\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Client-side check:\n * Determine whether the access token is present and unexpired\n * @returns {Boolean}\n */\nexport function isAccessTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.accessToken);\n}\n\n/**\n * Client-side check:\n * Determine whether the refresh token is present and unexpired\n * @returns {Boolean}\n */\nexport function isRefreshTokenLocallyValid() {\n  return isJwtLocallyValid(store.tokens.refreshToken);\n}\n\n/**\n * Set the cookies and store.tokens based on a tokens object\n * @property {Object} tokens An object containing JWT access, refresh, and ID tokens\n * @property {Object} data The response object from the API\n * @returns\n */\nexport async function defaultHandleTokens(tokens, data) {\n  setCookiesAndTokens(tokens);\n  await exchange(data);\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","import { store } from \"./store.js\";\nimport { authenticationData } from \"./authentication.js\";\n\n/**\n * Set authenticationData.firstFactors from the authentication object\n * @param {Object} authentication\n * {\n *   firstFactors,\n *   secondFactors\n * }\n * @returns\n */\nexport function setFirstFactors(authentication) {\n  // If we're not initialized, there are no first factors.\n  if (!store.tenantId) {\n    console.warn(\n      \"setFirstFactors: tried to set factors without a tenantId set.\"\n    );\n    return;\n  }\n  // If we're passed an invalid argument, keep the authentication data as is.\n  if (\n    !authentication ||\n    typeof authentication !== \"object\" ||\n    !Array.isArray(authentication.firstFactors)\n  ) {\n    console.warn(\"setFirstFactors: invalid factors passed.\");\n    return;\n  }\n  authenticationData.firstFactors = authentication.firstFactors;\n}\n\n/**\n * Check if MFA is required for the ongoing signup or login flow.\n * @returns {Boolean} true if MFA is currently required\n */\nexport function isFirstFactorTokenPresent() {\n  return !!authenticationData.firstFactorToken;\n}\n\n/**\n * Update the MFA service state given a response to a signup or login call.\n * Adds secondFactors and firstFactorToken if it is a MFA Required response,\n * removes them if it is a successful signup or login,\n * leaves the service unchanged otherwise.\n * @param {Object} data\n */\nexport function defaultHandleMfaRequired(firstFactorToken, data) {\n  if (!data.isMfaRequired) {\n    // If we've logged in or signed up successfully,\n    // clear the MFA service state.\n    if (data.message === \"OK\") {\n      clearMfa();\n    }\n    return;\n  }\n  authenticationData.firstFactorToken = firstFactorToken;\n  authenticationData.secondFactors = data.authentication.secondFactors;\n}\n\n/**\n * If MFA is required, returns a headers object with authorization set to the firstFactorToken.\n * Otherwise, returns an empty object.\n * @returns {Object} a headers object with MFA authorization header set, or empty if MFA is not required\n */\nexport function getMfaHeaders() {\n  if (authenticationData.firstFactorToken) {\n    return {\n      authorization: `Bearer ${authenticationData.firstFactorToken}`,\n    };\n  }\n  return {};\n}\n\n/**\n * Clears the current transient state of the MFA service,\n * leaving the tenant's persistent state in place.\n */\nexport function clearMfa() {\n  authenticationData.secondFactors = [];\n  authenticationData.firstFactorToken = null;\n}\n\n/**\n * Fully resets the MFA service, including the tenant's persistent state,\n * to it uninitialized state.\n */\nexport function resetMfa() {\n  clearMfa();\n  authenticationData.firstFactors = [];\n}\n","import {\n  isAccessTokenLocallyValid,\n  isRefreshTokenLocallyValid,\n} from \"./tokens.js\";\nimport { authenticationData } from \"./authentication.js\";\nimport { isFirstFactorTokenPresent, clearMfa } from \"./mfa.js\";\nimport { refresh } from \"./refresh.js\";\n\n/**\n * Determine whether a user is logged in by checking their\n * JWT access token and, if invalid, refreshing it and checking\n * again.\n * @returns {Promise<Boolean>}\n */\nasync function getIsLoggedIn() {\n  try {\n    // If the access token is locally valid, return true\n    if (isAccessTokenLocallyValid()) {\n      return true;\n    }\n\n    // If the refresh token is locally invalid, return false\n    if (!isRefreshTokenLocallyValid()) {\n      return false;\n    }\n\n    // Attempt to refresh the access token\n    await refresh();\n\n    // The access token should now be valid\n    return isAccessTokenLocallyValid();\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Return detailed information about the current session.\n * @returns {Promise<Object>}\n */\nexport async function getSession() {\n  const isLoggedIn = await getIsLoggedIn();\n  return {\n    isLoggedIn,\n    needsSecondFactor: isFirstFactorTokenPresent(),\n    firstFactors: authenticationData.firstFactors,\n    secondFactors: authenticationData.secondFactors,\n    resetMfaState: clearMfa,\n  };\n}\n","import { getQueryAttr } from \"./url.js\";\nimport { isBrowser } from \"./utils.js\";\n\nexport const store = {\n  codeChallenge: \"\",\n  get usePkce() {\n    return !!store.codeChallenge;\n  },\n};\n\n/**\n * Reads an unexpired challenge code from local storage\n * @returns {string?} the challenge code, if an unexpired one is in local storage\n */\nexport function readPkceDataFromLocalStorage() {\n  if (!isBrowser()) {\n    return;\n  }\n  const codeChallenge = window.localStorage.getItem(\"uf_pkce_code_challenge\");\n  if (codeChallenge) {\n    const expiresAt = window.localStorage.getItem(\n      \"uf_pkce_code_challenge_expiresAt\"\n    );\n    if (expiresAt && parseInt(expiresAt, 10) > Date.now()) {\n      return codeChallenge;\n    }\n  }\n}\n\n/**\n * Write a challenge code to local storage, expiring in 5 minutes\n * @param {string} codeChallenge\n * @returns\n */\nexport function writePkceDataToLocalStorage(codeChallenge) {\n  if (!isBrowser()) {\n    return;\n  }\n  if (!codeChallenge) {\n    return clearPkceDataFromLocalStorage();\n  }\n  store.codeChallenge = codeChallenge;\n  const expiresAt = Date.now() + 1000 * 60 * 5; // 5 minutes from now\n  try {\n    window.localStorage.setItem(\"uf_pkce_code_challenge\", codeChallenge);\n    window.localStorage.setItem(\"uf_pkce_code_challenge_expiresAt\", expiresAt);\n  } catch (err) {\n    // Suppress exception from full local storage\n  }\n}\n\n/**\n * Clear the challenge code and expiration from local storage\n */\nexport function clearPkceDataFromLocalStorage() {\n  if (!isBrowser()) {\n    return;\n  }\n  window.localStorage.removeItem(\"uf_pkce_code_challenge\");\n  window.localStorage.removeItem(\"uf_pkce_code_challenge_expiresAt\");\n}\n\n/**\n * Set up the PKCE service: look for a PKCE challenge code in\n * query params or local storage. If both are present, the query\n * param is preferred.\n * @returns {Boolean} true if we should use PKCE in our auth requests\n */\nexport function setupPkce() {\n  if (!isBrowser()) {\n    return;\n  }\n  const codeChallengeFromQueryParams = getQueryAttr(\"code_challenge\");\n  if (codeChallengeFromQueryParams) {\n    store.codeChallenge = codeChallengeFromQueryParams;\n    writePkceDataToLocalStorage(codeChallengeFromQueryParams);\n    return true;\n  }\n  const codeChallengeFromLocalStorage = readPkceDataFromLocalStorage();\n  if (codeChallengeFromLocalStorage) {\n    store.codeChallenge = codeChallengeFromLocalStorage;\n    return true;\n  }\n  clearPkceDataFromLocalStorage();\n  return false;\n}\n\n/**\n * Get (possibly empty) PKCE query params to attach to an auth request\n * @returns {object} an object to be used for an Axios request's params field\n */\nexport function getPkceRequestQueryParams() {\n  if (!store.usePkce) {\n    return {};\n  }\n  return { code_challenge: store.codeChallenge };\n}\n\n/**\n * Redirect to url with PKCE query params (authorization_code) set. Does not redirect\n * if url or authorizationCode are falsy.\n *\n * @param {string} url full URL to redirect to (may be a deep link for a mobile app)\n * @param {string} authorizationCode the authorization code received from the server\n * @returns\n */\nexport function defaultHandlePkceRequired(authorizationCode, url, data) {\n  if (!url || !authorizationCode) {\n    return;\n  }\n  if (!store.usePkce) {\n    console.warn(\n      \"Redirecting with a PKCE authorization code, but no PKCE challenge code is present in the client. This is unexpected.\"\n    );\n  }\n  const _url = new URL(url);\n  _url.searchParams.set(\"authorization_code\", authorizationCode);\n  clearPkceDataFromLocalStorage();\n  window.location.assign(_url.href);\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { getSession } from \"./session.js\";\nimport { store as pkceStore } from \"./pkce.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n/**\n * Redirect the browser based on explicit redirect input path, or the API response\n * @property {String|Boolean} redirect A path to redirect to, or false to not redirect\n * @property {Object} data The response object from the API\n * @returns\n */\nexport const defaultHandleRedirect = (redirect, data) => {\n  if (redirect === false) return;\n  // If redirect is the boolean true, redirect to the default redirect path, not to \"/true\"\n  if (redirect === true) {\n    const path = getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n    redirectToPath(path);\n    return;\n  }\n  const path = redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n  redirectToPath(path);\n};\n\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's After-login path.\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  const { isLoggedIn } = await getSession();\n  if (!isLoggedIn) {\n    return removeAllCookies();\n  }\n\n  // TODO see #130: can handle this more elegantly once we have an exchange tokens -> authorizationCode\n  // endpoint on the server.\n  // If this is a PKCE auth session, don't redirect with this function ever.\n  // The only way to get an authorizationCode currently is to go through an auth flow.\n  // The PKCE module handles redirect after a PKCE Required response is received.\n  if (pkceStore.usePkce) {\n    return;\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await get(`/self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * If the access token is invalid, redirect the browser to the\n * provided path.\n */\nexport async function redirectIfLoggedOut({ redirect } = {}) {\n  // If the user is logged in, return without doing anything\n  const { isLoggedIn } = await getSession();\n  if (isLoggedIn) {\n    return;\n  }\n\n  // Remove all cookies\n  removeAllCookies();\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no redirect path was provided, do not redirect\n  return;\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import { defaultHandleTokens, setTokensFromCookies } from \"./tokens.js\";\nimport { setCookie } from \"./cookies.js\";\nimport { defaultHandleRedirect, getQueryAttr } from \"./url.js\";\nimport { defaultHandlePkceRequired } from \"./pkce.js\";\nimport { defaultHandleMfaRequired } from \"./mfa.js\";\n\n// Data specific to the MFA service\nexport const authenticationData = {\n  firstFactors: [],\n  secondFactors: [],\n  firstFactorToken: null,\n};\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n\n/**\n * Handle the API response for an authentication request\n * @property {Object} data\n * @property {String|Boolean} redirect\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @returns {Object} data (or redirection)\n */\nexport async function handleLoginResponse({\n  data,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  let redirectValue =\n    redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n\n  // Handle upstreamResponse\n  if (typeof handleUpstreamResponse === \"function\") {\n    await handleUpstreamResponse(data.upstreamResponse, data);\n  }\n\n  // Handle \"MFA required\" response\n  if (data.hasOwnProperty(\"firstFactorToken\")) {\n    if (typeof handleMfaRequired === \"function\") {\n      await handleMfaRequired(data.firstFactorToken, data);\n    } else {\n      defaultHandleMfaRequired(data.firstFactorToken, data);\n    }\n    return data;\n  }\n\n  // Handle tokens\n  if (data.hasOwnProperty(\"tokens\")) {\n    if (typeof handleTokens === \"function\") {\n      await handleTokens(data.tokens, data);\n    } else {\n      await defaultHandleTokens(data.tokens, data);\n    }\n  }\n\n  // Handle \"PKCE required\" response\n  if (data.hasOwnProperty(\"authorizationCode\")) {\n    if (!redirectValue) {\n      throw new Error(\"Missing PKCE redirect url\");\n    }\n    if (typeof handlePkceRequired === \"function\") {\n      await handlePkceRequired(data.authorizationCode, redirectValue, data);\n    } else {\n      defaultHandlePkceRequired(data.authorizationCode, redirectValue, data);\n      return data;\n    }\n  }\n\n  // Handle redirection\n  if (data.hasOwnProperty(\"redirectTo\") && redirect !== false) {\n    if (typeof handleRedirect === \"function\") {\n      await handleRedirect(redirectValue, data);\n    } else {\n      defaultHandleRedirect(redirectValue, data);\n    }\n  }\n\n  return data;\n}\n","import Cookies from \"js-cookie\";\nimport { get } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await get(`/auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./authentication.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, defaultHandleRedirect } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @property {String} username\n * @property {String} name\n * @property {String} email\n * @property {String} password\n * @property {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @property {String} redirect - do not redirect if false, or redirect to a specific path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    const { data } = await post(\n      `/auth/create`,\n      {\n        tenantId: store.tenantId,\n        username,\n        name,\n        email,\n        password,\n        data: userData,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @property {String} email The user's email. One of email/username/emailOrUsername should be present.\n * @property {String} username The user's username. One of email/username/emailOrUsername should be present.\n * @property {String} emailOrUsername Either the user's email or username. One of email/username/emailOrUsername should be present.\n * @property {String} password\n * @property {String|Boolean} redirect\n *  URL to redirect to after login, or false to suppress redirect. Otherwise, redirects to the after-login path set on the server.\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @property {Object} options\n * @property {Boolean} options.noResetEmail\n *  By default, Userfront sends a password reset email if a user without a password tries to log in with a password.\n *  Set options.noResetEmail = true to override this behavior and return an error instead.\n *\n */\nexport async function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n}) {\n  try {\n    const body = {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    };\n    if (options && options.noResetEmail) {\n      body.options = {\n        noResetEmail: true,\n      };\n    }\n    const { data } = await post(`/auth/basic`, body, {\n      headers: getMfaHeaders(),\n      params: getPkceRequestQueryParams(),\n    });\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { data } = await post(`/auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Set a user's password with their link credentials or JWT access token.\n *\n * If no method is provided, the order is:\n * - Check for link credentials; then\n * - Check for a JWT access token first\n *\n * @property {String} method (optional) \"link\" or \"jwt\"\n * @property {String} password\n * @property {String} existingPassword\n * @property {String} uuid\n * @property {String} token\n * @property {String} redirect\n * @property {Function} handleUpstreamResponse - \n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @returns\n */\nexport async function updatePassword({\n  method,\n  password,\n  existingPassword,\n  uuid,\n  token,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  switch (method) {\n    // Allow for explicit setting of method\n    case \"link\":\n      return updatePasswordWithLink({\n        uuid,\n        token,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"jwt\":\n      return updatePasswordWithJwt({ password, existingPassword });\n    default:\n      // Default (no method provided) is to look for link credentials first, then JWT access token\n      token = token || getQueryAttr(\"token\");\n      uuid = uuid || getQueryAttr(\"uuid\");\n      if (uuid && token) {\n        return updatePasswordWithLink({\n          uuid,\n          token,\n          password,\n          redirect,\n          handleUpstreamResponse,\n          handleMfaRequired,\n          handlePkceRequired,\n          handleTokens,\n          handleRedirect,\n        });\n      } else if (store.tokens.accessToken) {\n        return updatePasswordWithJwt({ password, existingPassword });\n      } else {\n        throw new Error(\n          \"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\"\n        );\n      }\n  }\n}\n\nexport const resetPassword = updatePassword;\n\nexport async function updatePasswordWithLink({\n  uuid,\n  token,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { data } = await put(`/auth/reset`, {\n      tenantId: store.tenantId,\n      uuid,\n      token,\n      password,\n    });\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function updatePasswordWithJwt({ password, existingPassword }) {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(\n        `updatePassword({ method: \"jwt\" }) was called without a JWT access token.`\n      );\n    }\n\n    const { data } = await put(\n      `/auth/basic`,\n      {\n        tenantId: store.tenantId,\n        password,\n        existingPassword,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${store.tokens.accessToken}`,\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\n\nexport function getProviderLink({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenantId\");\n\n  let url = `${store.baseUrl}auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url += `&redirect=${encodeURIComponent(redirectTo)}`;\n  }\n\n  return url;\n}\n\n/**\n * Log in or register a user via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport function signonWithSso({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n","import { post, put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @property {String} token\n * @property {UUID} uuid\n * @property {String} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function loginWithLink({\n  token,\n  uuid,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { data } = await put(\n      \"/auth/link\",\n      {\n        token,\n        uuid,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders, isFirstFactorTokenPresent } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Verify that proper identifier is available for the channel\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n */\nfunction enforceChannel({ channel, phoneNumber, email }) {\n  // Enforce valid channels\n  if (channel !== \"sms\" && channel !== \"email\") {\n    throw new Error(\"Invalid channel\");\n  }\n\n  // Do not require phoneNumber or email when firstFactorToken is included\n  if (isFirstFactorTokenPresent()) {\n    return;\n  }\n\n  // Check that phoneNumber or email are present if needed\n  if (channel === \"sms\" && !phoneNumber) {\n    throw new Error(`SMS verification code requires \"phoneNumber\"`);\n  } else if (channel === \"email\" && !email) {\n    throw new Error(`Email verification code requires \"email\"`);\n  }\n}\n\n/**\n * Send a verification code to the provided email address or phone number.\n * @property {String} channel \"sms\" (default) or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n * @property {String} name\n * @property {String} username\n * @property {Object} data\n */\nexport async function sendVerificationCode({\n  channel = \"sms\",\n  phoneNumber,\n  email,\n  name,\n  username,\n  data,\n}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data: res } = await post(\n      `/auth/code`,\n      {\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n      }\n    );\n    return res;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithVerificationCode({\n  channel,\n  verificationCode,\n  email,\n  phoneNumber,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data } = await put(\n      `/auth/code`,\n      {\n        channel,\n        verificationCode,\n        email,\n        phoneNumber,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get, post } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { isFirstFactorTokenPresent, getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with a TOTP authenticator code or a TOTP backup code,\n * plus an identifier for the user (e.g. userId, userUuid, or email)\n *\n * @property {String} totpCode \"123456\"\n * @property {String} backupCode \"aaaaa-bbbbb\"\n * @property {Integer} userId\n * @property {String} userUuid\n * @property {String} emailOrUsername\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String|Boolean} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithTotp({\n  totpCode,\n  backupCode,\n  userId,\n  userUuid,\n  emailOrUsername,\n  email,\n  username,\n  phoneNumber,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  try {\n    const { data } = await post(\n      `/auth/totp`,\n      {\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        tenantId: store.tenantId,\n      },\n      {\n        headers: getMfaHeaders(),\n        params: getPkceRequestQueryParams(),\n      }\n    );\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function getTotp() {\n  try {\n    if (isFirstFactorTokenPresent()) {\n      const { data } = await get(`/auth/totp`, {\n        headers: getMfaHeaders(),\n      });\n      return data;\n    }\n\n    if (!store.tokens.accessToken) {\n      throw new Error(`getTotp() was called without a JWT access token.`);\n    }\n\n    const { data } = await get(`/auth/totp`, {\n      headers: {\n        Authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { defaultHandleRedirect } from \"./url\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ method, redirect } = {}) {\n  if (method === \"saml\") {\n    return completeSamlLogout();\n  }\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  try {\n    const { data } = await get(`/auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    defaultHandleRedirect(redirect, data);\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\nasync function completeSamlLogout() {\n  if (!store.tokens.accessToken) {\n    throw new Error(\"Please log in to authorize your logout request.\");\n  }\n\n  try {\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/logout?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   defaultHandleRedirect(redirect, data);\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import { get } from \"./api.js\";\nimport { privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\nimport { setFirstFactors } from \"./mfa.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n * and the tenant's authentication factors\n */\nexport async function setMode() {\n  try {\n    const { data } = await get(`/tenants/${store.tenantId}/mode`);\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n    setFirstFactors(data.authentication);\n    return data;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\nimport { put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { refresh } from \"./refresh.js\";\nimport { getTotp } from \"./totp.js\";\nimport { getJwtPayload } from \"./utils.js\";\nimport { updatePassword } from \"./password.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await put(`/self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJwtPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\nstore.user.updatePassword = updatePassword;\nstore.user.getTotp = getTotp;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { getSession } from \"./session\";\nimport { redirectIfLoggedIn, redirectIfLoggedOut } from \"./url.js\";\nimport { signup } from \"./signup.js\";\nimport { login } from \"./login.js\";\nimport { updatePassword, resetPassword, sendResetLink } from \"./password.js\";\nimport { sendLoginLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\nimport { apiUrl } from \"./constants.js\";\nimport { resetMfa } from \"./mfa.js\";\n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenantId\");\n\n  store.tenantId = tenantId;\n\n  store.baseUrl = opts.baseUrl || apiUrl;\n  if (!store.baseUrl.endsWith(\"/\")) {\n    store.baseUrl += \"/\";\n  }\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    const url = `https://${store.domain}`;\n    axios.defaults.headers.common[\"x-application-id\"] = url;\n    axios.defaults.headers.common[\"x-origin\"] = url;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n\n  // Estimate the mode synchronously with local data.\n  // Clients that require the true mode or the default\n  // authenticationData should call and await setMode.\n  setModeSync();\n\n  resetMfa();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh: (a, b, c) => {\n    try {\n      console.warn(\n        \"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\"\n      );\n    } catch (error) {}\n    return refresh(a, b, c);\n  },\n\n  // signon\n  login,\n  resetPassword,\n  updatePassword,\n  sendLoginLink,\n  sendResetLink,\n  sendVerificationCode,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // session\n  getSession,\n\n  // url\n  redirectIfLoggedIn,\n  redirectIfLoggedOut,\n\n  // user\n  user,\n\n  // utils\n};\n","import { loginWithPassword } from \"./password.js\";\nimport { loginWithPasswordMigrate } from \"./password.migrate.js\";\nimport { loginWithLink, sendPasswordlessLink } from \"./link.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { loginWithTotp } from \"./totp.js\";\nimport { loginWithVerificationCode } from \"./verificationCode.js\";\nimport { completeSamlLogin } from \"./saml.js\";\nimport { setupPkce } from \"./pkce.js\";\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @property {String} method\n * @property {Number} userId\n * @property {String} userUuid\n * @property {String} email\n * @property {String} username\n * @property {String} emailOrUsername\n * @property {String} phoneNumber\n * @property {String} password\n * @property {String} token\n * @property {String} uuid\n * @property {String} totpCode\n * @property {String} backupCode\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} verificationCode\n * @property {String | Boolean} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function login({\n  method,\n  // User identifiers\n  userId,\n  userUuid,\n  email,\n  username,\n  emailOrUsername,\n  phoneNumber,\n  // Password\n  password,\n  // Link\n  token,\n  uuid,\n  // Totp\n  totpCode,\n  backupCode,\n  // Verification code\n  channel,\n  verificationCode,\n  // Other\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  setupPkce();\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n    case \"okta\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n        options,\n      });\n    case \"password-migrate\":\n      return loginWithPasswordMigrate({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n        options,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({\n        token,\n        uuid,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"totp\":\n      return loginWithTotp({\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"verificationCode\":\n      return loginWithVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        verificationCode,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"saml\":\n      return completeSamlLogin();\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n","import { post } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { handleLoginResponse } from \"./authentication.js\";\nimport { getMfaHeaders } from \"./mfa.js\";\nimport { getPkceRequestQueryParams } from \"./pkce.js\";\n\n/**\n * Log a user in with email/username and password using the password/migrate endpoint.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @property {String} email The user's email. One of email/username/emailOrUsername should be present.\n * @property {String} username The user's username. One of email/username/emailOrUsername should be present.\n * @property {String} emailOrUsername Either the user's email or username. One of email/username/emailOrUsername should be present.\n * @property {String} password\n * @property {String|Boolean} redirect\n *  URL to redirect to after login, or false to suppress redirect. Otherwise, redirects to the after-login path set on the server.\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n * @property {Object} options\n * @property {Boolean} options.noResetEmail\n *  By default, Userfront sends a password reset email if a user without a password tries to log in with a password.\n *  Set options.noResetEmail = true to override this behavior and return an error instead.\n *\n */\nexport async function loginWithPasswordMigrate({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n  options,\n}) {\n  try {\n    const body = {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    };\n    if (options && options.noResetEmail) {\n      body.options = {\n        noResetEmail: true,\n      };\n    }\n\n    // Make the request to password/migrate\n    const { data } = await post(`/auth/password/migrate`, body, {\n      headers: getMfaHeaders(),\n      params: getPkceRequestQueryParams(),\n    });\n\n    // Handle the API response to the login request\n    return handleLoginResponse({\n      data,\n      redirect,\n      handleUpstreamResponse,\n      handleMfaRequired,\n      handlePkceRequired,\n      handleTokens,\n      handleRedirect,\n    });\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\nexport async function completeSamlLogin() {\n  try {\n    if (!store.tokens.accessToken) {\n      return console.warn(\"Cannot complete SAML login without access token\");\n    }\n\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/login?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { signupWithPassword } from \"./password.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { sendPasswordlessLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode.js\";\nimport { setupPkce } from \"./pkce.js\";\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @property {String} method\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String} name\n * @property {Object} data - Object for custom user fields\n * @property {String} password\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} redirect - do not redirect if false, or redirect to given path\n * @property {Function} handleUpstreamResponse\n * @property {Function} handleMfaRequired\n * @property {Function} handlePkceRequired\n * @property {Function} handleTokens\n * @property {Function} handleRedirect\n */\nexport async function signup({\n  method,\n  email,\n  username,\n  phoneNumber,\n  name,\n  data,\n  password,\n  channel,\n  redirect,\n  handleUpstreamResponse,\n  handleMfaRequired,\n  handlePkceRequired,\n  handleTokens,\n  handleRedirect,\n} = {}) {\n  setupPkce();\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n    case \"okta\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n        handleUpstreamResponse,\n        handleMfaRequired,\n        handlePkceRequired,\n        handleTokens,\n        handleRedirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    case \"verificationCode\":\n      return sendVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n      });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n"],"names":["store","user","tokens","mode","token","base64","split","replace","jsonPayload","decodeURIComponent","window","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","console","payload","getJwtPayload","Date","exp","throwFormattedError","_error$response","_error$response$data","Error","response","data","message","isBrowser","reduceSlashes","str","put","path","options","url","baseUrl","axios","e","Promise","reject","post","get","setCookie","value","type","cookieName","tenantId","secure","sameSite","Cookies","set","removeCookie","name","paths","domains","location","pathname","hostname","primaryDomain","undefined","err","domain","remove","removeAllCookies","accessTokenName","idTokenName","refreshTokenName","accessToken","idToken","refreshToken","attr","unsetUser","isFirstFactorTokenPresent","authenticationData","firstFactorToken","getMfaHeaders","authorization","clearMfa","secondFactors","getSession","resolve","getIsLoggedIn","isLoggedIn","needsSecondFactor","firstFactors","resetMfaState","body","recover","result","isAccessTokenLocallyValid","isJwtLocallyValid","refresh","then","_catch","codeChallenge","usePkce","clearPkceDataFromLocalStorage","localStorage","removeItem","codeChallengeFromQueryParams","getQueryAttr","writePkceDataToLocalStorage","expiresAt","now","setItem","codeChallengeFromLocalStorage","getItem","parseInt","readPkceDataFromLocalStorage","getPkceRequestQueryParams","code_challenge","attrName","href","indexOf","defaultHandleRedirect","redirect","redirectToPath","redirectTo","pathOrUrl","document","el","createElement","assign","hash","search","handleLoginResponse","handleUpstreamResponse","handleMfaRequired","handlePkceRequired","handleTokens","handleRedirect","_temp13","_exit","_temp11","_result","_temp9","_exit2","_temp7","_result3","_temp5","hasOwnProperty","_temp4","redirectValue","authorizationCode","defaultHandlePkceRequired","warn","_url","searchParams","_temp3","defaultHandleTokens","defaultHandleMfaRequired","isMfaRequired","authentication","_temp","_temp2","_temp10","upstreamResponse","_temp12","setCookiesAndTokens","access","cookieOptions","id","setTokensFromCookies","headers","status","basicRefresh","exchange","tokenName","idTokenPayload","propsToDefine","prop","setUser","updatePasswordWithJwt","password","existingPassword","Authorization","updatePasswordWithLink","uuid","updatePassword","method","resetPassword","signonWithSso","provider","getProviderLink","origin","encodeURIComponent","sendPasswordlessLink","email","username","userData","enforceChannel","channel","phoneNumber","sendVerificationCode","res","privateIPRegex","setMode","reason","getReason","Array","isArray","setModeSync","modeValue","isTestHostname","hn","match","isHttps","protocol","update","Object","keys","length","hasRole","roleName","roles","getTotp","_result2","initCallbacks","isRegistered","addInitCallback","cb","push","init","opts","endsWith","defaults","common","forEach","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","logout","userUuid","completeSamlLogout","a","b","login","userId","emailOrUsername","totpCode","backupCode","verificationCode","setupPkce","noResetEmail","params","loginWithPassword","loginWithPasswordMigrate","loginWithLink","loginWithTotp","loginWithVerificationCode","completeSamlLogin","sendLoginLink","sendResetLink","signup","signupWithPassword","redirectIfLoggedIn","pkceStore","tenant","loginRedirectPath","redirectIfLoggedOut"],"mappings":"kKAAaA,MAAAA,EAAQ,CACnBC,KAAM,CADa,EAEnBC,OAAQ,CAFW,EAGnBC,KAAM,QCSD,WAAuBC,GAC5B,IAEE,MAEYC,EAFMD,EAAME,MAAM,KAAK,GAEVC,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAWzCC,EAAGC,mBAAmBC,OAAOC,KAAKN,GAAQC,MAAM,IAAIM,IAAIC,GACvE,KAAO,KAAOA,EAAEC,WAAW,GAAGC,SAAS,KAAKC,OAAO,IACnDC,KAAK,KAEP,OAAWC,KAACC,MAAMX,EACnB,CAAC,MAAOY,GACPC,QAAQD,MAAM,+BAAgCA,EAC/C,CACF,CA+BM,WAA2BhB,GAChC,IAEE,IAAKA,EACH,SAIF,MAAakB,EAAGC,EAAcnB,GAC9B,OAAO,IAAAoB,KAAuB,IAAdF,EAAQG,KAAc,QACvC,CAAC,MAAOL,GACP,QACD,CACF,CAEM,SAAAM,EAA6BN,GAAO,IAAAO,EAAAC,EACzC,GAAKR,EAAL,CACA,GAAqB,mBAAU,MAAM,IAAAS,MAAUT,GAC/C,GAAIA,MAAAA,UAAAA,EAAAA,EAAOU,WAAP,SAAAH,EAAiBI,OAAjBH,EAAuBI,QACzB,MAAM,IAAAH,MAAUT,EAAMU,SAASC,KAAKC,SAEtC,MACDZ,CANa,CAMb,CAEM,SAAAa,IACL,MAAyB,oBAAlBvB,MACR,CCtCM,QAAaV,EAAMC,KCnD1B,SAASiC,EAAcC,GACrB,OAAUA,EAAC5B,QAAQ,eAAgB,KACpC,CAgCqB6B,MAAAA,EAAIC,SAAAA,EAAMf,EAASgB,GAAzC,IACE,MAASC,EAAGL,EAAe,GAAElC,EAAMwC,UAAUH,KAC7C,uBAAOI,UAAML,IAAIG,EAAKjB,EAASgB,GAChC,CAHD,MAAAI,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EAZAG,EAAA,SAA2BR,EAAMf,EAASgB,GAAS,IACjD,MAAMC,EAAML,EAAe,GAAElC,EAAMwC,UAAUH,KAC7C,OAAOI,QAAAA,QAAAA,UAAMI,KAAKN,EAAKjB,EAASgB,GACjC,CAHD,MAZAI,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EAAAI,EAAA,SAA0BT,EAAMC,GAAS,IACvC,MAAMC,EAAML,EAAe,GAAElC,EAAMwC,UAAUH,KAC7C,OAAOI,QAAAA,QAAAA,EAAK,QAACK,IAAIP,EAAKD,GACvB,CAHD,MA6BAI,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,ECjCO,SAAAK,EAAmBC,EAAOV,EAASW,GACxC,MAAgBC,EAAI,GAAED,KAAQjD,EAAMmD,WACpCb,EAAUA,GAAW,CACnBc,OAAuB,SAAfpD,EAAMG,KACdkD,SAAU,OAEC,YAATJ,IACFX,EAAQe,SAAW,UAErBC,EAAO,QAACC,IAAIL,EAAYF,EAAOV,EAChC,CAMD,SAAAkB,EAAsBC,GAEpB,IAAAC,EAAWC,EACX,IACE,MAAMtB,EAAO3B,OAAOkD,SAASC,SACvBC,EAAWpD,OAAOkD,SAASE,SAE3BC,EADgBD,EAASxD,MAAM,KACDU,OAAO,GAAGC,KAAK,KACnDyC,EAAQ,MAACM,EAAW3B,EAAM,KAC1BsB,EAAU,MACRK,EACAF,EACC,IAAGA,IACJC,EACC,IAAGA,IAEP,CAAC,MAAOE,GACPP,EAAQ,MAACM,EAAW,KACpBL,EAAU,MAACK,EACZ,CAGDN,EAAM9C,IAAKyB,IACTsB,EAAQ/C,IAAKsD,IACX,QAAgB,CAAhB,EACIA,IAAQ5B,EAAQ4B,OAASA,GACzB7B,IAAMC,EAAQD,KAAOA,GACzBiB,EAAO,QAACa,OAAOV,EAAMnB,EAArB,EAJF,EAOH,CAKe8B,SAAAA,IACdZ,EAAaxD,EAAME,OAAOmE,iBAC1Bb,EAAaxD,EAAME,OAAOoE,aAC1Bd,EAAaxD,EAAME,OAAOqE,kBCN1BvE,EAAME,OAAOsE,iBAAcR,EAC3BhE,EAAME,OAAOuE,aAAUT,EACvBhE,EAAME,OAAOwE,kBAAeV,EHhBvB,WACL,IAAK,MAALW,OAAyB1E,KACS,mBAArBD,EAAMC,KAAK0E,WACb3E,EAAMC,KAAK0E,EAGvB,CGWCC,EDKD,CE9BeC,SAAAA,IACd,QAASC,EAAmBC,gBAC7B,CA2BeC,SAAAA,IACd,OAAIF,EAAmBC,iBACd,CACLE,cAAgB,UAASH,EAAmBC,oBAGzC,EACR,UAMMG,IACLJ,EAAmBK,cAAgB,GACnCL,EAAmBC,iBAAmB,IACvC,CCzCqBK,MAAAA,EAAa,WAAA,IAAA,OAAAzC,QAAA0C,QACRC,KAAnBC,KAAAA,SAAAA,GACN,MAAO,CACLA,aACAC,kBAAmBX,IACnBY,aAAcX,EAAmBW,aACjCN,cAAeL,EAAmBK,cAClCO,cAAeR,EAPgB,EASlC,CATD,MAAAxC,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EA1Be4C,EAAgB,WAAA,OAAA3C,QAAA0C,QAoiBxB,SAAgBM,EAAMC,GAC5B,IACC,IAAIC,IAniBEC,OF8DCC,EAAkB/F,EAAME,OAAOwE,eEpD9BsB,QAAAA,QAAAA,KAZJC,KAAA,WAeF,OAAOH,GAfL,EAsiBJ,CAAC,MAAMpD,GACP,OArhBC,CAshBD,CACD,OAAImD,GAAUA,EAAOI,KACbJ,EAAOI,UAAK,EA3iBU,WAkB3B,OACD,CAAA,GA2hBFJ,CAAA,CA9iB8BK,GAoB9B,EC/BiBlG,EAAG,CACnBmG,cAAe,GACfC,cACE,QAASpG,EAAMmG,aAChB,GA+CaE,SAAAA,IACTpE,MAGLvB,OAAO4F,aAAaC,WAAW,0BAC/B7F,OAAO4F,aAAaC,WAAW,oCAChC,CAQM,aACL,IAAKtE,IACH,OAEF,MAAkCuE,EAAGC,EAAa,kBAClD,GAAID,EAGF,OAFAxG,EAAMmG,cAAgBK,EAxCVE,SAA4BP,GAC1C,IAAKlE,IACH,OAEF,IAAKkE,EACH,OAAOE,IAETrG,EAAMmG,cAAgBA,EACtB,MAAeQ,EAAGnF,KAAKoF,MAAQ,IAC/B,IACElG,OAAO4F,aAAaO,QAAQ,yBAA0BV,GACtDzF,OAAO4F,aAAaO,QAAQ,mCAAoCF,EACjE,CAAC,MAAO1C,GAGV,CAAA,CA0BGyC,CAA4BF,IACrB,EAET,MAAMM,aA/DN,IAAK7E,IACH,OAEF,MAAMkE,EAAgBzF,OAAO4F,aAAaS,QAAQ,0BAClD,GAAIZ,EAAe,CACjB,MAAeQ,EAAGjG,OAAO4F,aAAaS,QACpC,oCAEF,GAAIJ,GAAaK,SAASL,EAAW,IAAMnF,KAAKoF,MAC9C,OAAOT,CAEV,CACF,CAmDuCc,GACtC,OAAIH,GACF9G,EAAMmG,cAAgBW,GACf,IAETT,KAED,EAAA,CAMea,SAAAA,IACd,OAAKlH,EAAMoG,QAGJ,CAAEe,eAAgBnH,EAAMmG,eAFtB,CAAA,CAGV,CCtFM,SAAAM,EAAsBW,GAC3B,GACoB,iBAAlB1G,QAC2B,iBAApBA,OAAOkD,UACblD,OAAOkD,SAASyD,QACjB3G,OAAOkD,SAASyD,KAAKC,QAAS,GAAEF,MAAe,GAIjD,OAAO3G,mBACLC,OAAOkD,SAASyD,KAAK/G,MAAO,GAAE8G,MAAa,GAAG9G,MAAM,KAAK,GAE5D,CAQM,MAA2BiH,EAAG,CAACC,EAAUzF,MAC7B,IAAbyF,GAQJC,GANiB,IAAbD,EAKSA,GAAYf,EAAa,aAAe1E,EAAK2F,YAAc,IAJzDjB,EAAa,aAAe1E,EAAK2F,YAAc,IAM/D,EAuEeD,SAAAA,EAAeE,GAE7B,IACGA,GACmB,iBAAbC,UACW,wBAElB,OAEF,IACEA,UAAYlH,MACb,CAAC,MAAOU,GACP,MACD,CAGD,MAAQyG,EAAGD,SAASE,cAAc,KAClCD,EAAGR,KAAOM,EAENE,EAAGhE,WAAanD,OAAOkD,SAASC,UAClCnD,OAAOkD,SAASmE,OAFN,GAAEF,EAAGhE,WAAWgE,EAAGG,OAAOH,EAAGI,SAI1C,CChGqBC,MAAAA,YAAoBnG,KACxCA,EADwCyF,SAExCA,EAFwCW,uBAGxCA,EAHwCC,kBAIxCA,EAJwCC,mBAKxCA,EALwCC,aAMxCA,EANwCC,eAOxCA,IACC,IAAA,SAAAC,IAAA,IAAAC,EAAA,SAAAC,EAAAC,GAAA,GAAAF,EAAA,OAAAE,EAAA,SAAAC,IAAA,IAAAC,EAAA,SAAAC,EAAAC,GAAA,GAAAF,EAAA,OAAAE,EAAA,MAAAC,EAAA,WAAA,GA0CGjH,EAAKkH,eAAe,gBAA8B,IAAbzB,EA1CxC,CAAA,MAAA0B,EAAA,WAAA,GA2C+B,mBAAnBX,EA3CZ,OAAA5F,QAAA0C,QA4CSkD,EAAeY,EAAepH,IA5CvCkE,KAAA,WAAA,GA8CGsB,EAAsB4B,EAAepH,EAIzC,CAlDC,GAkDD,GAAAmH,GAAAA,EAAAjD,KAAA,OAAAiD,EAAAjD,KAAA,WAAA,EAAA,CAAA,CAlDC,GAkDD,OAAA+C,GAAAA,EAAA/C,KAAA+C,EAAA/C,KAAA,WAAA,OAlDClE,CAAA,GAkDMA,CAlDN,CA6BGA,MAAAA,EAAAA,WAAAA,GAAAA,EAAKkH,eAAe,qBACtB,CAAA,IAAKE,EACH,UAAMtH,MAAU,6BA/BnB,MAiCmC,mBAA9BwG,EACIA,QAAAA,QAAAA,EAAmBtG,EAAKqH,kBAAmBD,EAAepH,IAlCnEkE,KAAA,WAAA,IF6DaoD,SAA0BD,EAAmB7G,EAAKR,GAChE,IAAKQ,IAAQ6G,EACX,OAEGpJ,EAAMoG,SACT/E,QAAQiI,KACN,wHAGJ,QAAa,QAAQ/G,GACrBgH,EAAKC,aAAajG,IAAI,qBAAsB6F,GAC5C/C,IACA3F,OAAOkD,SAASmE,OAAOwB,EAAKlC,KAC7B,CEtCKgC,CAA0BtH,EAAKqH,kBAAmBD,GApCrDN,EAAA,IAoBG9G,CAAAA,CASAA,GATAA,OAAAA,GAAAA,EAAAA,KAAAA,EAAAA,KAAAA,GAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,WAAAA,GAAAA,EAAKkH,eAAe,UAClB,CAAA,MAAAQ,EAAwB,qBACpBnB,QAAAA,QAAAA,EAAavG,EAAK7B,OAAQ6B,IAtBnCkE,KAAA,cAAAtD,QAAA0C,QAwBSqE,EAAoB3H,EAAK7B,OAAQ6B,IAdvCA,KAAAA,WAAAA,GAAAA,GAAAA,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,KAAAA,WAAAA,EAAAA,CAAAA,CAUAA,GAVAA,OAAAA,GAAAA,EAAAA,KAAAA,EAAAA,KAAAA,GAAAA,GAAAA,CAAAA,MAAAA,EAAAA,WAAAA,GAAAA,EAAKkH,eAAe,oBAMflH,CAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,CAhBR,uBAWkC,mBAAtBqG,yBACHA,EAAkBrG,EAAKgD,iBAAkBhD,IAZlDkE,KAAA,eJEa0D,SAAyB5E,EAAkBhD,GACpDA,EAAK6H,eAQV9E,EAAmBC,iBAAmBA,EACtCD,EAAmBK,cAAgBpD,EAAK8H,eAAe1E,eANhC,OAAjBpD,EAAKC,SACPkD,GAML,CICKyE,CAAyB5H,EAAKgD,iBAAkBhD,EAbpD,IAAA,OAAA+H,GAAAA,EAAA7D,KAAA6D,EAAA7D,KAAA8D,GAAAA,GAAA,CAAA,CASIhI,GATJ,OAAAiI,GAAAA,EAAA/D,KAAA+D,EAAA/D,KAAAyC,GAAAA,EAAAsB,EAAA,CAAA,MACExC,GAAYf,EAAa,aAAe1E,EAAK2F,YAAc,IAF5D,sBAKqC,mBAA3BS,yBACHA,EAAuBpG,EAAKkI,iBAAkBlI,IANrDkE,KAAA,WAAA,EAAA,IAAA,OAAAtD,QAAA0C,QAAA6E,GAAAA,EAAAjE,KAAAiE,EAAAjE,KAAAuC,GAAAA,IAmDF,CA3DD,MA9BA9F,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EAAaoC,EAAqB,CAChCW,aAAc,GACdN,cAAe,GACfJ,iBAAkB,MAOJoF,SAAAA,EAAoBjK,GAClC6C,EAAU7C,EAAOkK,OAAOpH,MAAO9C,EAAOkK,OAAOC,cAAe,UAC5DtH,EAAU7C,EAAOoK,GAAGtH,MAAO9C,EAAOoK,GAAGD,cAAe,MAChDnK,EAAO8F,SAAW9F,EAAO8F,QAAQhD,OACnCD,EAAU7C,EAAO8F,QAAQhD,MAAO9C,EAAO8F,QAAQqE,cAAe,WAEhEE,GACD,CC0hBM,SAAgB5E,EAAAA,EAAMC,GAC5B,IACC,IAAIC,EAASF,GACb,CAAC,MAAMjD,GACP,OAAckD,EAAClD,EACf,CACD,OAAImD,GAAUA,EAAOI,KACbJ,EAAOI,UAAK,EAAQL,IAG5B,CArfD,QAzDgC,WAAA,IAAA,MAAAkE,EAAA5D,EAAA,iDAe9B,QAAqB5C,EAAO,QAACR,IAAI9C,EAAME,OAAOqE,kBADlB,oCAGKzB,OAAAA,QAAAA,QAAAA,EAAK,gBAAgB,CAClD0H,QAAS,CACPvF,cAAgB,UAASP,QAH3BuB,KAAA,UACIlE,KAAEA,EAAF0I,OAAQA,IAKd,GAAe,MAAXA,EACF,UAAM5I,MAAUE,EAAKC,SAAW,wBAPhC,GASED,EAAK7B,OAEP,OADAiK,EAAoBpI,EAAK7B,UAGzB,UAAM2B,MAAU,0BAEnB,EAAA,WAAQT,GACPM,EAAoBN,EACrB,GACF,OAlCDsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,CAEUgI,sBACP,EAH6B,SAGrBtJ,GACPC,QAAQiI,KAAM,mBAAkBlI,EAAMY,UACvC,GAL6B,OAAAW,QAAA0C,QAAAyE,GAAAA,EAAA7D,KAAA6D,EAAA7D,KAAA,WAAA,QAAA,EAM/B,CAND,MAAAvD,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,IN0E0CxC,SAAAA,EAAQ6B,OAAM,OACtDoI,EAAoBjK,GADkCyC,QAAA0C,QMjBxD,aACE,OAAA1C,QAAA0C,SAcD,CNIOsF,CAAS5I,IAFuCkE,KAAA,WAAA,EAGvD,CAHD,MAhFAjG,GAAAA,OAAAA,QAAAA,OAAAA,EAAAA,CAAAA,EA6BgBuK,SAAAA,IACK,CAAC,SAAU,KAAM,WACzB3J,IAAKgK,IACd,IACE,QAActH,EAAO,QAACR,IAAI9C,EAAME,OAAQ,GAAE0K,eAC1C5K,EAAME,OAAQ,GAAE0K,UAAoBxK,EAGlB,OAAdwK,GAAsBxK,cHtC9B,IAAKJ,EAAME,OAAOuE,QAChB,OAAOpD,QAAQiI,KAAK,wCAGtBtJ,EAAMC,KAAOD,EAAMC,MAAQ,GAC3B,MAAoB4K,EAAGtJ,EAAcvB,EAAME,OAAOuE,SAG/BqG,EAAG,CACpB,QACA,cACA,WACA,OACA,QACA,OACA,YACA,YACA,OACA,SACA,WACA,WACA,mBACA,yBACA,mBACA,yBACA,gBACA,eAEF,IAAK,MAAMC,KAAXD,EAAkC,CAChC,GAAa,WAATC,EAAmB,OACvB/K,EAAMC,KAAK8K,GAAQF,EAAeE,EACnC,CACF,CGOOC,EAEH,CAAC,MAAO5J,GACPC,QAAQiI,KAAM,mBAAkBsB,WACjC,GAEJ,CAiBe9E,SAAAA,IACd,OAAwBC,EAAC/F,EAAME,OAAOsE,YACvC,CA/DDxE,EAAME,OAASF,EAAME,QAAU,CAAA,EAC/BF,EAAME,OAAO8F,QAAUA,EAuFhB,QAAehG,EAAME,OOkdrB,SAAAgG,EAAgBP,EAAMC,GAC5B,IACC,IAAIC,EAASF,GACb,CAAC,MAAMjD,GACP,OAAckD,EAAClD,EACf,CACD,OAAImD,GAAUA,EAAOI,KACPJ,EAACI,UAAK,EAAQL,GAG5BC,CAAA,OAvTDoF,EAAA,UAA4CC,SAAEA,EAAFC,iBAAYA,IAAxD,IACM,OAAAxI,QAAA0C,QAAAa,EAAA,WACF,IAAKlG,EAAME,OAAOsE,YAChB,MAAM,UACH,4EAHH,OAAA7B,QAAA0C,QAOqBjD,EACpB,cACD,CACEe,SAAUnD,EAAMmD,SAChB+H,WACAC,oBAEF,CACEX,QAAS,CACPY,cAAgB,UAASpL,EAAME,OAAOsE,kBAhB1CyB,KAAA,UAOIlE,KAAEA,IAcR,QArBE,EAsBH,WAAQX,GACPM,EAAoBN,EACrB,GACF,CA1BD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EAnCA2I,EAAA,UAA6CC,KAC3CA,EAD2ClL,MAE3CA,EAF2C8K,SAG3CA,EAH2C1D,SAI3CA,EAJ2CW,uBAK3CA,EAL2CC,kBAM3CA,EAN2CC,mBAO3CA,EAP2CC,aAQ3CA,EAR2CC,eAS3CA,QAEI,OAAA5F,QAAA0C,QAAAa,EAAA,WAGF,GAFA9F,EAAQA,GAASqG,EAAa,SAC9B6E,EAAOA,GAAQ7E,EAAa,SACvBrG,IAAUkL,EAAM,MAAM,UAAU,yBAHnC,OAAA3I,QAAA0C,QAIqBjD,EAAK,cAAc,CACxCe,SAAUnD,EAAMmD,SAChBmI,OACAlL,QACA8K,cARAjF,KAAA,UAIIlE,KAAEA,IAMR,OAAOmG,EAAoB,CACzBnG,OACAyF,WACAW,yBACAC,oBACAC,qBACAC,eACAC,kBAjBA,EAmBH,EApBA,SAoBQnH,GACPM,EAAoBN,EACrB,GACF,CAjCD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EAzDA6I,EAAA,UAAqCC,OACnCA,EADmCN,SAEnCA,EAFmCC,iBAGnCA,EAHmCG,KAInCA,EAJmClL,MAKnCA,EALmCoH,SAMnCA,EANmCW,uBAOnCA,EAPmCC,kBAQnCA,EARmCC,mBASnCA,EATmCC,aAUnCA,EAVmCC,eAWnCA,IACC,IACD,OAAQiD,GAEN,IAAK,OACH,OAA6BH,EAAC,CAC5BC,OACAlL,QACA8K,WACA1D,WACAW,yBACAC,oBACAC,qBACAC,eACAC,mBAEJ,IAAK,MACH,SAA6B,CAAE2C,WAAUC,qBAC3C,QAIE,GAFA/K,EAAQA,GAASqG,EAAa,UAC9B6E,EAAOA,GAAQ7E,EAAa,UAChBrG,EACV,OAAOiL,EAAuB,CAC5BC,OACAlL,QACA8K,WACA1D,WACAW,yBACAC,oBACAC,qBACAC,eACAC,mBAEOvI,GAAAA,EAAME,OAAOsE,YACtB,OAAOyG,EAAsB,CAAEC,WAAUC,qBAEzC,UAAMtJ,MACJ,8FAIT,CArDD,MAAAa,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EAuDa+I,EAAgBF,WCtMtBG,GAAuBC,SAAEA,EAAFnE,SAAYA,IACxC,IAAKmE,EAAU,MAAU9J,IAAAA,MAAM,oBAC/B,MAASU,EAzBKqJ,UAAgBD,SAAEA,EAAFnE,SAAYA,IAC1C,IAAKmE,EAAU,MAAM,IAAA9J,MAAU,oBAC/B,IAAK7B,EAAMmD,SAAU,MAAUtB,IAAAA,MAAM,oBAErC,IAAOU,EAAI,GAAEvC,EAAMwC,eAAemJ,qBAA4B3L,EAAMmD,mBAAmBzC,OAAOkD,SAASiI,SAEnGnE,EAAaF,GAAYf,EAAa,YAQ1C,OAPiB,IAAbe,IACFE,EAAiC,iBAApBE,UAAgCA,SAAShE,SAASC,UAE7D6D,IACFnF,GAAQ,aAAYuJ,mBAAmBpE,MAGlCnF,CACR,CAUaqJ,CAAgB,CAAED,WAAUnE,aACxC9G,OAAOkD,SAASmE,OAAOxF,EACxB,CCohBM,SAAgBoD,EAAAA,EAAMC,GAC5B,IACC,IAAUC,EAAGF,GACb,CAAC,MAAMjD,GACP,OAAckD,EAAClD,EACf,CACD,OAAImD,GAAUA,EAAOI,KACPJ,EAACI,UAAK,EAAQL,IAG5B,CAzeD,MAAAmG,EAAA,UAA2CC,MACzCA,EADyCvI,KAEzCA,EAFyCwI,SAGzCA,EAHyCC,SAIzCA,EAJyC5J,QAKzCA,IALF,IAOM,OAAAK,QAAA0C,QAAAa,EAAA,WAAA,OAAAvD,QAAA0C,QACqBxC,EAAM,aAAa,CACxCmJ,QACAvI,OACAwI,WACAlK,KAAMmK,EACN5J,UACAa,SAAUnD,EAAMmD,2BANZpB,KAAEA,IAQR,OATEA,CAAA,EAUH,EAXA,SAWQX,GACPM,EAAoBN,EACrB,GACF,CApBD,MAhBAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EC+eO,SAAgBiD,EAAAA,EAAMC,GAC5B,IACC,IAAIC,EAASF,GACb,CAAC,MAAMjD,GACP,OAAckD,EAAClD,EACf,CACD,OAAImD,GAAUA,EAAOI,KACPJ,EAACI,UAAK,EAAQL,GAG5BC,CAAA,CA/iBD,SAAAsG,GAAwBC,QAAEA,EAAFC,YAAWA,EAAXL,MAAwBA,IAE9C,GAAgB,QAAZI,GAAiC,UAAZA,EACvB,MAAM,UAAU,mBAIlB,IAAIvH,IAAJ,CAKA,GAAgB,QAAZuH,IAAsBC,EACxB,UAAMxK,MAAW,gDACZ,GAAgB,UAAZuK,IAAwBJ,EACjC,MAAUnK,IAAAA,MAAO,2CANlB,CAQF,CAsDD,MA3CsByK,YAAqBF,QACzCA,EAAU,MAD+BC,YAEzCA,EAFyCL,MAGzCA,EAHyCvI,KAIzCA,EAJyCwI,SAKzCA,EALyClK,KAMzCA,QAEI,OAAAY,QAAA0C,QAAAa,EAAA,WAAA,OACFiG,EAAe,CACbC,UACAC,cACAL,UAG0BnJ,QAAAA,QAAAA,EACzB,aACD,CACEuJ,UACAJ,QACAK,cACA5I,OACAwI,WACAlK,OACAoB,SAAUnD,EAAMmD,UAElB,CACEqH,QAASxF,OAnBXiB,KAAA,UAOMlE,KAAMwK,IAed,OAAOA,CAtBL,EAuBH,EAxBA,SAwBQnL,GACPM,EAAoBN,EACrB,GACF,CAlCD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,ECygBO,SAAAwD,EAAgBP,EAAMC,GAC5B,IACC,IAAUC,EAAGF,GACb,CAAC,MAAMjD,GACP,OAAOkD,EAAQlD,EACf,CACD,OAAImD,GAAUA,EAAOI,KACbJ,EAAOI,UAAK,EAAQL,GAG5BC,CAAA,CCVM,SAAAK,EAAgBP,EAAMC,GAC5B,IACC,IAAUC,EAAGF,GACb,CAAC,MAAMjD,GACP,OAAckD,EAAClD,EACf,CACD,OAAImD,GAAUA,EAAOI,KACbJ,EAAOI,UAAK,EAAQL,GAG5BC,CAAA,OC1jB0B2G,EACzB,uGCsCFC,EAAA,WAAA,IACM,OAAA9J,QAAA0C,QAwgBC,SAAgBM,EAAMC,GAC5B,IACC,IAAUC,EA1gBNlD,QAAA0C,QACqBvC,EAAK,YAAW9C,EAAMmD,kBAD3C8C,KAAA,UACIlE,KAAEA,Ib/BL,IAAyB8H,EaoC5B,OAJA1J,GAAK6C,MAAQjB,EAAK5B,MAAQ,OAC1BA,GAAKuM,OAASC,GAAUxM,GAAK6C,OAC7BhD,EAAMG,KAAOA,GAAK6C,MblCU6G,EamCZ9H,EAAK8H,ebjClB7J,EAAMmD,SAQR0G,GACyB,iBAAnBA,GACN+C,MAAMC,QAAQhD,EAAepE,cAKhCX,EAAmBW,aAAeoE,EAAepE,aAH/CpE,QAAQiI,KAAK,4CAXbjI,QAAQiI,KACN,iEa0BAvH,CAAA,EA2gBJ,CAAC,MAAMW,GACP,OAAckD,GACd,CACD,OAAIC,GAAUA,EAAOI,KACbJ,EAAOI,UAAK,EAAQL,GAG5BC,CAAA,CAlhBKK,CAAA,EAOU,WACZ/F,GAAK6C,MAAQ,OACbhD,EAAMG,KAAOA,GAAK6C,KACnB,GACF,CAZD,MAAAN,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EAjCavC,GAAO,CAClB6C,MAAO,OACP0J,YAAQ1I,EACRyI,WA+CK,SAAAK,KACL,MAAMC,EAvCQC,SAAeC,GAC7B,IACE,MAAMnJ,EAAiBpD,OAAOkD,SAASE,SACvC,SAAUA,EAASoJ,MAAM,gBAAiBpJ,EAASoJ,MAAMV,GAC1D,CAAC,MAAOvI,GACP,OAAO,CACR,CACF,CAgCmB+I,KA9BJG,WACd,IACE,MAAoC,kBAAtBvJ,SAASwJ,QACxB,CAAC,MAAOhM,GACP,OACD,CAAA,CACF,CAwBwC+L,GAAY,OAAS,OAC5DhN,GAAK6C,MAAQ+J,EACb5M,GAAKuM,OAASC,GAAUI,GACxB/M,EAAMG,KAAO4M,CACd,CAOD,YAAmB5M,GACjB,IACE,MAAa,SAATA,EACK,SAEwB,UAA7BO,OAAOkD,SAASwJ,SACX,OAC+B,WAA7B1M,OAAOkD,SAASwJ,SAClB,WAEA,QAEV,CAAC,MAAOhM,GACV,CAAA,CArED0L,KCgDA9M,EAAMC,KAAKoN,OA9CkB/L,SAAAA,OAC3B,OAAKA,GAAWgM,OAAOC,KAAKjM,GAASkM,OAAS,EAC5C7K,QAAA0C,QAAOhE,QAAQiI,KAAK,sCAFc3G,QAAA0C,QAM9BjD,EAAK,QAAQd,EAAS,CAC1BkJ,QAAS,CACPvF,cAAgB,UAASjF,EAAME,OAAOsE,kBARNyB,KAAA,WAAA,OAAAtD,QAAA0C,QAa9BW,KAb8BC,KAAA,WAepC,OAAOjG,EAAMC,IAfuB,IAgBrC,CAhBD,MAAAyC,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EA+CA1C,EAAMC,KAAKwN,QAvBJ,SAAiBC,GAAUvK,SAAEA,GAAa,CAA1C,GACL,IACE,IAAKnD,EAAME,OAAOsE,cAAgBxE,EAAMmD,SACtC,OACD,EACD,MAAM8B,cAAEA,GAAkB1D,EAAcvB,EAAME,OAAOsE,aACrD,QAAKS,MAIAA,EADL9B,EAAWA,GAAYnD,EAAMmD,YACI8B,EAAc9B,GAAUwK,QAGlD1I,EAAc9B,GAAUwK,MAAMrG,QAAQoG,IAAa,CAC3D,CAAC,MAAOtM,GACP,OACD,CAAA,CACF,EAODpB,EAAMC,KAAKsL,eAAiBA,EAC5BvL,EAAMC,KAAK2N,uBJQL,IAAAnF,EAAA,OAAA9F,QAAA0C,QAAAa,EAAA,WAAA,SAAA6D,EAAA8D,GAAA,GAAApF,EAAA,OAAAoF,EAQF,IAAK7N,EAAME,OAAOsE,YAChB,MAAM,IAAA3C,MAAW,oDATjB,OAYqBiB,QAAAA,QAAAA,EAAK,aAAa,CACvC0H,QAAS,CACPY,cAAgB,UAASpL,EAAME,OAAOsE,kBAFpCyB,KAAA,UAAAlE,KAAEA,IAMR,OAAOA,CAlBL,EACE8C,CAAAA,MAAAA,EAAAA,WAAAA,GAAAA,IADF,OAAAlC,QAAA0C,QAEuBvC,EAAK,aAAa,CACvC0H,QAASxF,OADLiB,KAAA,UAAAlE,KAAEA,IAGDA,OAAAA,EAAAA,EAAAA,CALP,EAmBH,CAlBK8C,GAkBL,OAAAiF,GAAAA,EAAA7D,KAAA6D,EAAA7D,KAAA8D,GAAAA,EAAAD,EAAA,WAAQ1I,GACPM,EAAoBN,EACrB,GACF,CAvBD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EK/CA,IAAIoL,GAAgB,GA2DJC,IAAG,iBA+BJ,CAEbC,gBA3CF,SAAyBC,GAClBA,GAAoB,mBAAPA,GAClBH,GAAcI,KAAKD,EACpB,EAyCCE,KAvFF,SAAchL,EAAUiL,EAAO,IAC7B,IAAKjL,EAAU,OAAc9B,QAACiI,KAAK,0CASnC,GAPAtJ,EAAMmD,SAAWA,EAEjBnD,EAAMwC,QAAU4L,EAAK5L,SHpCA,gCGqChBxC,EAAMwC,QAAQ6L,SAAS,OAC1BrO,EAAMwC,SAAW,KAGf4L,EAAKlK,OAAQ,CACflE,EAAMkE,OAASkK,EAAKlK,OACpB,MAAM3B,EAAO,WAAUvC,EAAMkE,SAC7BzB,EAAAA,QAAM6L,SAAS9D,QAAQ+D,OAAO,oBAAsBhM,EACpDE,EAAK,QAAC6L,SAAS9D,QAAQ+D,OAAO,YAAchM,CAC7C,ChBlCDvC,EAAME,OAASF,EAAME,QAAU,GAC/BF,EAAME,OAAOmE,gBAAmB,UAASrE,EAAMmD,WAC/CnD,EAAME,OAAOoE,YAAe,MAAKtE,EAAMmD,WACvCnD,EAAME,OAAOqE,iBAAoB,WAAUvE,EAAMmD,WgBmCjDoH,IAKAuC,KfiCA5H,IACAJ,EAAmBW,aAAe,Ge9BlC,IACMqI,GAAcN,OAAS,GACzBM,GAAcU,QAASP,IAChBA,GAAoB,mBAAPA,GAClBA,EAAG,CAAE9K,YACN,GAEH2K,GAAgB,EACjB,CAAC,MAAO1M,GAAO,CACjB,EAmDCqN,gCAlCF,WACE,IAAIV,GAAJ,CACAA,IAAe,EACf,IACEW,QAAQC,WAAcC,EAMjBF,QAAQC,UALX,WACE,IAAOE,EAAGD,EAAEE,MAAMC,KAAMC,WAGxB,OAFAtO,OAAOuO,cAAc,IAAAC,MAAU,cAC/BxO,OAAOuO,cAAc,IAAAC,MAAU,eAEhCL,CAAA,GAEHH,QAAQS,aAAe,CAAEP,GACvB,WACE,IAAOC,EAAGD,EAAEE,MAAMC,KAAMC,WAGxB,OAFAtO,OAAOuO,cAAc,IAAIC,MAAM,iBAC/BxO,OAAOuO,cAAc,IAAIC,MAAM,eACxBL,CACR,EANoB,CAMlBH,QAAQS,cAEbzO,OAAO0O,iBAAiB,WAAY,KAClC1O,OAAOuO,cAAc,IAAAC,MAAU,cAA/B,EAEH,CAAC,MAAO9N,GACV,CApBuB,IAAEwN,CAFxBb,CAsBD,EAaCsB,OJ/G2B,UAAA7D,OAAEA,EAAFhE,SAAUA,GAAa,CAApD,GAAA,IACE,GAAe,SAAXgE,EACF,OAmBgC,WAAA,IAClC,IAAKxL,EAAME,OAAOsE,YAChB,MAAU3C,IAAAA,MAAM,mDAFgB,MAK9BkI,EAAA7D,EAAA,WAAA,OAAAvD,QAAA0C,QACqBvC,EAAK,uBAAuB,CACjD0H,QAAS,CACPvF,cAAgB,UAASjF,EAAME,OAAOsE,kBAHxCyB,KAAA,UACIlE,KAAEA,IAMRrB,OAAOkD,SAASmE,OACb,GAAE/H,EAAMwC,yCAAyCxC,EAAMmD,kBAAkBpB,EAAK3B,cAAcJ,EAAMC,KAAKqP,WARxG,EAUH,EAAQlO,SAAAA,GACPM,EAAoBN,EACrB,GAjBiC,OAAAuB,QAAA0C,QAAA0E,GAAAA,EAAA9D,KAAA8D,EAAA9D,KAAA,mBAAA,EAkBnC,oCArC4BsJ,GAE3B,IAAKvP,EAAME,OAAOsE,YAChB,OAAOJ,QAAAA,QAAAA,KAL6C,MAAA0F,EAAA5D,EAAA,WAS7BpD,OAAAA,QAAAA,QAAAA,EAAK,eAAe,CACzC0H,QAAS,CACPvF,cAAgB,UAASjF,EAAME,OAAOsE,kBAHxCyB,KAAA,UACIlE,KAAEA,IAKRqC,IACAmD,EAAsBC,EAAUzF,EAP9B,EAQH,EAAa,WACZqC,GACD,GAlBqD,OAAAzB,QAAA0C,QAAAyE,GAAAA,EAAA7D,KAAA6D,EAAA7D,KAAA,WAAA,QAAA,EAmBvD,CAnBD,MAAAvD,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EIkHEvC,QACAsM,UAGAzG,QAAS,CAACwJ,EAAGC,EAAG5O,KACd,IACEQ,QAAQiI,KACN,wGAEH,CAAC,MAAOlI,GAAO,CAChB,OAAc4E,GAAA,EAIhB0J,MC1G0B,UAAAlE,OAC1BA,EAD0BmE,OAG1BA,EAH0BL,SAI1BA,EAJ0BtD,MAK1BA,EAL0BC,SAM1BA,EAN0B2D,gBAO1BA,EAP0BvD,YAQ1BA,EAR0BnB,SAU1BA,EAV0B9K,MAY1BA,EAZ0BkL,KAa1BA,EAb0BuE,SAe1BA,EAf0BC,WAgB1BA,EAhB0B1D,QAkB1BA,EAlB0B2D,iBAmB1BA,EAnB0BvI,SAqB1BA,EArB0BW,uBAsB1BA,EAtB0BC,kBAuB1BA,EAvB0BC,mBAwB1BA,EAxB0BC,aAyB1BA,EAzB0BC,eA0B1BA,EA1B0BjG,QA2B1BA,GACE,IA5BJ,IA6BE,IAAKkJ,EACH,UAAM3J,MAAU,qDAGlB,OADAmO,IACQxE,GACN,IAAK,QACL,IAAK,QACL,IAAK,WACL,IAAK,SACL,IAAK,SACL,IAAK,WACL,IAAK,OACH,OAAA7I,QAAA0C,QAAOqG,EAAc,CAAEC,SAAUH,EAAQhE,cAC3C,IAAK,WACH,OAAA7E,QAAA0C,kBVakC2G,MACtCA,EADsCC,SAEtCA,EAFsC2D,gBAGtCA,EAHsC1E,SAItCA,EAJsC1D,SAKtCA,EALsCW,uBAMtCA,EANsCC,kBAOtCA,EAPsCC,mBAQtCA,EARsCC,aAStCA,EATsCC,eAUtCA,EAVsCjG,QAWtCA,IAXF,wCAcI,QAAa,CACXa,SAAUnD,EAAMmD,SAChByM,gBAAiB5D,GAASC,GAAY2D,EACtC1E,YAJA,OAME5I,GAAWA,EAAQ2N,eACrBtK,EAAKrD,QAAU,CACb2N,cAAc,IARhBtN,QAAA0C,QAWqBxC,EAAM,cAAc8C,EAAM,CAC/C6E,QAASxF,IACTkL,OAAQhJ,OAFJjB,KAAA,UAAAlE,KAAEA,IAMR,OAAOmG,EAAoB,CACzBnG,OACAyF,WACAW,yBACAC,oBACAC,qBACAC,eACAC,kBAxBA,EA0BH,WAAQnH,GACPM,EAAoBN,EACrB,GACF,CA1CD,mCUba+O,CAAkB,CACvBnE,QACAC,WACA2D,kBACA1E,WACA1D,WACAW,yBACAC,oBACAC,qBACAC,eACAC,iBACAjG,aAEJ,IAAK,mBACH,OAAAK,QAAA0C,QC/DyC,UAAA2G,MAC7CA,EAD6CC,SAE7CA,EAF6C2D,gBAG7CA,EAH6C1E,SAI7CA,EAJ6C1D,SAK7CA,EAL6CW,uBAM7CA,EAN6CC,kBAO7CA,EAP6CC,mBAQ7CA,EAR6CC,aAS7CA,EAT6CC,eAU7CA,EAV6CjG,QAW7CA,IAXF,2BAuhBO,SAAgBqD,EAAMC,GAC5B,IACC,iBA3gBE,QAAa,CACXzC,SAAUnD,EAAMmD,SAChByM,gBAAiB5D,GAASC,GAAY2D,EACtC1E,YAJA,OAME5I,GAAWA,EAAQ2N,eACrBtK,EAAKrD,QAAU,CACb2N,cAAc,IAKKpN,QAAAA,QAAAA,EAAM,yBAAyB8C,EAAM,CAC1D6E,QAASxF,IACTkL,OAAQhJ,OAFJjB,KAAA,UAAAlE,KAAEA,IAMR,OAA0BmG,EAAC,CACzBnG,OACAyF,WACAW,yBACAC,oBACAC,qBACAC,eACAC,kBA1BA,EA4BH,CAgfY5C,EACb,CAAC,MAAMjD,GACP,SAAeA,EACf,CACD,OAAImD,GAAUA,EAAOI,KACbJ,EAAOI,UAAK,EAAQL,IAG5B,IAxfUxE,SAAAA,GACPM,EAAoBN,EACrB,GACF,CA5CD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,CD+Da0N,CAAyB,CAC9BpE,QACAC,WACA2D,kBACA1E,WACA1D,WACAW,yBACAC,oBACAC,qBACAC,eACAC,iBACAjG,aAEJ,IAAK,eACH,OAAOyJ,QAAAA,QAAAA,EAAqB,CAAEC,WAChC,IAAK,OACH,OAAArJ,QAAA0C,QRtF8B,UAAAjF,MAClCA,EADkCkL,KAElCA,EAFkC9D,SAGlCA,EAHkCW,uBAIlCA,EAJkCC,kBAKlCA,EALkCC,mBAMlCA,EANkCC,aAOlCA,EAPkCC,eAQlCA,GACE,CATJ,GASQ,IAAA,OAAA5F,QAAA0C,QAAAa,EAAA,WAIJ,GAFA9F,EAAQA,GAASqG,EAAa,SAC9B6E,EAAOA,GAAQ7E,EAAa,QACvBrG,GAAUkL,EAHb,OAAA3I,QAAA0C,QAKqBjD,EACrB,aACA,CACEhC,QACAkL,OACAnI,SAAUnD,EAAMmD,UAElB,CACEqH,QAASxF,IACTkL,OAAQhJ,OAdVjB,KAAA,UAKIlE,KAAEA,IAcR,OAA0BmG,EAAC,CACzBnG,OACAyF,WACAW,yBACAC,oBACAC,qBACAC,eACAC,kBA1BA,EA4BH,EAAQnH,SAAAA,GACPM,EAAoBN,EACrB,GACF,CAzCD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,CQsFa2N,CAAc,CACnBjQ,QACAkL,OACA9D,WACAW,yBACAC,oBACAC,qBACAC,eACAC,oBAEJ,IAAK,OACH,OAAO+H,QAAAA,QNhGuB,UAAAT,SAClCA,EADkCC,WAElCA,EAFkCH,OAGlCA,EAHkCL,SAIlCA,EAJkCM,gBAKlCA,EALkC5D,MAMlCA,EANkCC,SAOlCA,EAPkCI,YAQlCA,EARkC7E,SASlCA,EATkCW,uBAUlCA,EAVkCC,kBAWlCA,EAXkCC,mBAYlCA,EAZkCC,aAalCA,EAbkCC,eAclCA,GACE,CAfJ,GAeQ,IAAA,OAAA5F,QAAA0C,QAAAa,EAAA,WAEmBrD,OAAAA,QAAAA,QAAAA,EACpB,aACD,CACEgN,WACAC,aACAH,SACAL,WACAM,kBACA5D,QACAC,WACAI,cACAlJ,SAAUnD,EAAMmD,UAElB,CACEqH,QAASxF,IACTkL,OAAQhJ,sBAfNnF,KAAEA,IAoBR,OAAOmG,EAAoB,CACzBnG,OACAyF,WACAW,yBACAC,oBACAC,qBACAC,eACAC,kBA5BA,EA8BH,WAAQnH,GACPM,EAAoBN,EACrB,GACF,CAjDD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,CMgGa4N,CAAc,CACnBT,WACAC,aACAH,SACAL,WACAM,kBACA5D,QACAC,WACAI,cACA7E,WACAW,yBACAC,oBACAC,qBACAC,eACAC,oBAEJ,IAAK,mBACH,uBPlDN,UAAgD6D,QAC9CA,EAD8C2D,iBAE9CA,EAF8C/D,MAG9CA,EAH8CK,YAI9CA,EAJ8C7E,SAK9CA,EAL8CW,uBAM9CA,EAN8CC,kBAO9CA,EAP8CC,mBAQ9CA,EAR8CC,aAS9CA,EAT8CC,eAU9CA,GACE,CAXJ,OAYM,OAAA5F,QAAA0C,QAAAa,EAAA,WAAA,OACFiG,EAAe,CACbC,UACAC,cACAL,UAGqB5J,QAAAA,QAAAA,EACpB,aACD,CACEgK,UACA2D,mBACA/D,QACAK,cACAlJ,SAAUnD,EAAMmD,UAElB,CACEqH,QAASxF,IACTkL,OAAQhJ,OAXNjB,KAAA,UAAAlE,KAAEA,IAgBR,OAAOmG,EAAoB,CACzBnG,OACAyF,WACAW,yBACAC,oBACAC,qBACAC,eACAC,kBA9BA,EAgCH,EAjCK,SAiCGnH,GACPM,EAAoBN,EACrB,GACF,CA/CD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,COkDa6N,CAA0B,CAC/BnE,UACAJ,QACAK,cACA0D,mBACAvI,WACAW,yBACAC,oBACAC,qBACAC,eACAC,oBAEJ,IAAK,OACH,OAAA5F,QAAA0C,QE/IN,WAAA,IACM,OAAA1C,QAAA0C,QA6iBC,SAAgBM,EAAMC,GAC5B,IACC,IAAUC,EA9iBE7F,EAACE,OAAOsE,YAIK1B,QAAAA,QAAAA,EAAK,uBAAuB,CACjD0H,QAAS,CACPvF,cAAgB,UAASjF,EAAME,OAAOsE,kBAPxCyB,KAAA,UAKIlE,KAAEA,IAMRrB,OAAOkD,SAASmE,OACb,GAAE/H,EAAMwC,wCAAwCxC,EAAMmD,kBAAkBpB,EAAK3B,cAAcJ,EAAMC,KAAKqP,WAZvG,GAEOjO,QAAQiI,KAAK,kDA8iBxB,CAAC,MAAM5G,GACP,OAAOkD,EAAQlD,EACf,CACD,OAAImD,GAAUA,EAAOI,KACPJ,EAACI,UAAK,EAAQL,IAG5B,CAvjBKM,CAAA,WAcK9E,GACPM,EAAoBN,EACrB,GACF,CAlBD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,CF+Ia8N,IACT,QACE,UAAM3O,MAAU,0DAErB,CAtHD,MAAAa,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,ED2GE+I,gBACAF,iBACAkF,cP3EF,SAAoCzE,GAAO,IAAA,OAAArJ,QAAA0C,QAAAa,EAAA,WAEhBrD,OAAAA,QAAAA,QAAAA,EAAM,aAAa,CACxCmJ,QACA7I,SAAUnD,EAAMmD,YAHhB8C,KAAA,UACIlE,KAAEA,IAIR,OALEA,CAAA,EAMH,EAPwC,SAOhCX,GACPM,EAAoBN,EACrB,GACF,CAVD,oCO4EEsP,cTNF,SAAoC1E,GAAO,IAAA,OAAArJ,QAAA0C,QAAAa,EAAA,kCAEhBrD,EAAM,mBAAmB,CAC9CmJ,QACA7I,SAAUnD,EAAMmD,YAHhB8C,KAAA,UACIlE,KAAEA,IAIR,OAAOA,CALL,EAMH,EAPwC,SAOhCX,GACPM,EAAoBN,EACrB,GACF,CAVD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,ESOE4J,uBACAqE,OIzH2B,UAAAnF,OAC3BA,EAD2BQ,MAE3BA,EAF2BC,SAG3BA,EAH2BI,YAI3BA,EAJ2B5I,KAK3BA,EAL2B1B,KAM3BA,EAN2BmJ,SAO3BA,EAP2BkB,QAQ3BA,EAR2B5E,SAS3BA,EAT2BW,uBAU3BA,EAV2BC,kBAW3BA,EAX2BC,mBAY3BA,EAZ2BC,aAa3BA,EAb2BC,eAc3BA,GACE,CAfJ,GAAA,IAiBE,GADAyH,KACKxE,EACH,UAAM3J,MAAU,sDAElB,OAAQ2J,GACN,IAAK,QACL,IAAK,QACL,IAAK,WACL,IAAK,SACL,IAAK,SACL,IAAK,WACL,IAAK,OACH,OAAA7I,QAAA0C,QAAOqG,EAAc,CAAEC,SAAUH,EAAQhE,cAC3C,IAAK,WACH,OAAA7E,QAAA0C,kBb9BmC4G,SACvCA,EADuCxI,KAEvCA,EAFuCuI,MAGvCA,EAHuCd,SAIvCA,EAJuCgB,SAKvCA,EALuC1E,SAMvCA,EANuCW,uBAOvCA,EAPuCC,kBAQvCA,EARuCC,mBASvCA,EATuCC,aAUvCA,EAVuCC,eAWvCA,GACE,CAAA,GAZJ,wCAc2B1F,OAAAA,QAAAA,QAAAA,EACpB,eACD,CACEM,SAAUnD,EAAMmD,SAChB8I,WACAxI,OACAuI,QACAd,WACAnJ,KAAMmK,GAER,CACE1B,QAASxF,IACTkL,OAAQhJ,OAbVjB,KAAA,UACIlE,KAAEA,IAiBR,OAAOmG,EAAoB,CACzBnG,OACAyF,WACAW,yBACAC,oBACAC,qBACAC,eACAC,kBAzBA,EA2BH,WAAQnH,GACPM,EAAoBN,EACrB,GACF,CA3CD,MAAAsB,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,Ca8BakO,CAAmB,CACxB3E,WACAxI,OACAuI,QACAd,WACAgB,SAAUnK,EACVyF,WACAW,yBACAC,oBACAC,qBACAC,eACAC,oBAEJ,IAAK,eACH,OAAOwD,QAAAA,QAAAA,EAAqB,CAAEC,QAAOvI,OAAMwI,WAAUC,SAAUnK,KACjE,IAAK,mBACH,OAAAY,QAAA0C,QAAOiH,EAAqB,CAC1BF,UACAJ,QACAK,cACA5I,OACAwI,WACAlK,UAEJ,QACE,MAAUF,IAAAA,MACR,2DAGP,CA3DD,MAAAa,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EJ4HE1C,MAAAA,EAGAE,SACAsE,YhBnIcA,WAEd,OADAxE,EAAME,OAAOsE,YAAclB,EAAAA,QAAQR,IAAI9C,EAAME,OAAOmE,iBAC7CrE,EAAME,OAAOsE,WACrB,EgBiICC,QhB5HK,WAEL,OADAzE,EAAME,OAAOuE,QAAUnB,EAAO,QAACR,IAAI9C,EAAME,OAAOoE,eACnCpE,OAAOuE,OACrB,EgB4HCW,aAGAyL,mBZjHuC,UAAArJ,SAAEA,GAAa,CAAxD,GAA4D,IAAA,OAAA7E,QAAA0C,QAC7BD,KAAvBa,KAAA,UAAAV,WAAEA,IACR,IAAKA,EACH,OAAuBnB,IAQzB,GAAI0M,EAAU1K,QACZ,OAIF,GAAIoB,EACF,OAAqBC,EAACD,GACbf,GAAAA,EAAa,YACtB,OAAOgB,EAAehB,EAAa,aAnBqB,MAuBtDqD,EA6eC,SAAgBnE,EAAMC,GAC5B,IACC,IAAUC,EA/eNlD,QAAA0C,QACqBvC,EAAK,QAAQ,CAClC0H,QAAS,CACPvF,cAAgB,UAASjF,EAAME,OAAOsE,kBAFpCyB,KAAA,UAAAlE,KAAEA,IAKJA,EAAKgP,QAAUhP,EAAKgP,OAAOC,mBAC7BvJ,EAAe1F,EAAKgP,OAAOC,kBAE9B,EAueD,CAAC,MAAMtO,GACP,OAAOkD,GACP,CACD,OAAIC,GAAUA,EAAOI,KACPJ,EAACI,UAAK,EAAQL,IAG5B,CAvfKM,CAAA,aAUF9B,GACD,GACF,OAAA0F,GAAAA,EAAA7D,KAAA6D,EAAA7D,KAAA,WAAA,QAAA,CAAA,EAAA,CAnCD,oCYkHEgL,oBZzEF,UAA0CzJ,SAAEA,GAAa,IAAI,IAAA,OAAA7E,QAAA0C,QAE9BD,KAAvBa,KAAA,UAAAV,WAAEA,IACR,IAAIA,EAHuD,OAQ3DnB,IAGIoD,EACmBC,EAACD,GACbf,EAAa,YACfgB,EAAehB,EAAa,kBAD9B,CAboD,EAmB5D,CAnBD,MAAA/D,GAAA,OAAAC,QAAAC,OAAAF,EAAA,CAAA,EY4EEzC"}